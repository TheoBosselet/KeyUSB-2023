
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00001bf8  00001c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800174  00800174  00001d00  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ddd  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fd2  00000000  00000000  00008e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c14  00000000  00000000  0000ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab8  00000000  00000000  0000ea80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024ff  00000000  00000000  0000f538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040be  00000000  00000000  00011a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  00015af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
      16:	00 00       	nop
      18:	89 c0       	rjmp	.+274    	; 0x12c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_11>
      30:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_12>
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      84:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      94:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000a4 <ManufacturerString>:
      a4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      b4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000be <LanguageString>:
      be:	04 03 09 04                                         ....

000000c2 <ConfigurationDescriptor>:
      c2:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      d2:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

000000e2 <DeviceDescriptor>:
      e2:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      f2:	dc 01                                               ..

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d2 e0       	ldi	r29, 0x02	; 2
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e8 ef       	ldi	r30, 0xF8	; 248
     108:	fb e1       	ldi	r31, 0x1B	; 27
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
     10c:	05 90       	lpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a4 37       	cpi	r26, 0x74	; 116
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	a4 e7       	ldi	r26, 0x74	; 116
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a4 38       	cpi	r26, 0x84	; 132
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	77 d0       	rcall	.+238    	; 0x216 <main>
     128:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:
				.TotalLUNs                 = TOTAL_LUNS,
			},
	};
//////// Moi
void init_button(void){
    BUTTON_DIR &= ~(1<<BUTTON_BIT);
     12e:	3c 98       	cbi	0x07, 4	; 7
    BUTTON_PORT |= (1<<BUTTON_BIT);
     130:	44 9a       	sbi	0x08, 4	; 8
    BUTTON_DIR2 &= ~(1<<BUTTON_BIT2);
     132:	3d 98       	cbi	0x07, 5	; 7
    BUTTON_PORT2 |= (1<<BUTTON_BIT2);
     134:	45 9a       	sbi	0x08, 5	; 8
     136:	08 95       	ret

00000138 <vumetre>:

void vumetre(void){
    static long int compteur = CPT_MAX;
    static int k = 0;
    static unsigned char erase=0;
    if(compteur == 0){
     138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     140:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     144:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     148:	89 2b       	or	r24, r25
     14a:	8a 2b       	or	r24, r26
     14c:	8b 2b       	or	r24, r27
     14e:	11 f5       	brne	.+68     	; 0x194 <vumetre+0x5c>
        LED_PORT &= ~(1<<k);
     150:	2b b1       	in	r18, 0x0b	; 11
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	00 90 75 01 	lds	r0, 0x0175	; 0x800175 <k.4458>
     15a:	02 c0       	rjmp	.+4      	; 0x160 <vumetre+0x28>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <vumetre+0x24>
     164:	80 95       	com	r24
     166:	82 23       	and	r24, r18
     168:	8b b9       	out	0x0b, r24	; 11
        compteur = CPT_MAX;
     16a:	80 ea       	ldi	r24, 0xA0	; 160
     16c:	96 e8       	ldi	r25, 0x86	; 134
     16e:	a1 e0       	ldi	r26, 0x01	; 1
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     17a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     17e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
        k++;
     182:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <k.4458>
     186:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <k.4458+0x1>
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <k.4458+0x1>
     190:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <k.4458>
    }
    if(k==7 && !erase) { DataflashManager_Erase(); erase = 1; } 
     194:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <k.4458>
     198:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <k.4458+0x1>
     19c:	07 97       	sbiw	r24, 0x07	; 7
     19e:	41 f4       	brne	.+16     	; 0x1b0 <vumetre+0x78>
     1a0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__data_end>
     1a4:	81 11       	cpse	r24, r1
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <vumetre+0x78>
     1a8:	5f d3       	rcall	.+1726   	; 0x868 <DataflashManager_Erase>
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
    compteur --;
     1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1b8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1bc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	a1 09       	sbc	r26, r1
     1c4:	b1 09       	sbc	r27, r1
     1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1d6:	08 95       	ret

000001d8 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1d8:	84 b7       	in	r24, 0x34	; 52
     1da:	87 7f       	andi	r24, 0xF7	; 247
     1dc:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	a8 95       	wdr
     1e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     1e8:	88 61       	ori	r24, 0x18	; 24
     1ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     1ee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     1f2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	80 e8       	ldi	r24, 0x80	; 128
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     200:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     204:	0f be       	out	0x3f, r0	; 63
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     206:	0e 94 0a 0a 	call	0x1414	; 0x1414 <USB_Init>
	DataflashManager_Initialisation();
     20a:	d7 d1       	rcall	.+942    	; 0x5ba <DataflashManager_Initialisation>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     20c:	d4 d4       	rcall	.+2472   	; 0xbb6 <DataflashManager_CheckDataflashOperation>
     20e:	81 11       	cpse	r24, r1
     210:	01 c0       	rjmp	.+2      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
     212:	ff cf       	rjmp	.-2      	; 0x212 <__DATA_REGION_LENGTH__+0x12>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     214:	cf c4       	rjmp	.+2462   	; 0xbb4 <DataflashManager_ResetDataflashProtections>

00000216 <main>:
     216:	e0 df       	rcall	.-64     	; 0x1d8 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     218:	78 94       	sei
    
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
    
    //////// Moi
    LED_DIR1 |= (1<<LED_BIT1);
     21a:	3a 9a       	sbi	0x07, 2	; 7
    for(int k=0;k<7;k++){ LED_DIR |= (1<<k); LED_PORT |= (1<<k); }
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	4a b1       	in	r20, 0x0a	; 10
     226:	9b 01       	movw	r18, r22
     228:	08 2e       	mov	r0, r24
     22a:	01 c0       	rjmp	.+2      	; 0x22e <main+0x18>
     22c:	22 0f       	add	r18, r18
     22e:	0a 94       	dec	r0
     230:	ea f7       	brpl	.-6      	; 0x22c <main+0x16>
     232:	34 2f       	mov	r19, r20
     234:	32 2b       	or	r19, r18
     236:	3a b9       	out	0x0a, r19	; 10
     238:	3b b1       	in	r19, 0x0b	; 11
     23a:	23 2b       	or	r18, r19
     23c:	2b b9       	out	0x0b, r18	; 11
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	87 30       	cpi	r24, 0x07	; 7
     242:	91 05       	cpc	r25, r1
    init_button();
     244:	79 f7       	brne	.-34     	; 0x224 <main+0xe>
     246:	73 df       	rcall	.-282    	; 0x12e <init_button>
    
    if (!(BUTTON_PIN & (1<<BUTTON_BIT)) && !(BUTTON_PIN2 & (1<<BUTTON_BIT2))){
     248:	34 99       	sbic	0x06, 4	; 6
     24a:	0a c0       	rjmp	.+20     	; 0x260 <main+0x4a>
     24c:	35 99       	sbic	0x06, 5	; 6
     24e:	08 c0       	rjmp	.+16     	; 0x260 <main+0x4a>
    //fonctionnement de la clé si les deux boutons sont appuyés
	  for (;;)
	  {
		MS_Device_USBTask(&Disk_MS_Interface);
     250:	84 e0       	ldi	r24, 0x04	; 4
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <MS_Device_USBTask>
		USB_USBTask();
     258:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <USB_USBTask>
        vumetre();
     25c:	6d df       	rcall	.-294    	; 0x138 <vumetre>
     25e:	f8 cf       	rjmp	.-16     	; 0x250 <main+0x3a>
        }
     }
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	08 95       	ret

00000266 <EVENT_USB_Device_Connect>:
     266:	08 95       	ret

00000268 <EVENT_USB_Device_Disconnect>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     268:	08 95       	ret

0000026a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <MS_Device_ConfigureEndpoints>

00000272 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     272:	84 e0       	ldi	r24, 0x04	; 4
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0c 94 85 0c 	jmp	0x190a	; 0x190a <MS_Device_ProcessControlRequest>

0000027a <CALLBACK_MS_Device_SCSICommandReceived>:
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     27a:	e4 c4       	rjmp	.+2504   	; 0xc44 <SCSI_DecodeSCSICommand>

0000027c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     27c:	29 2f       	mov	r18, r25
     27e:	33 27       	eor	r19, r19
     280:	22 30       	cpi	r18, 0x02	; 2
     282:	31 05       	cpc	r19, r1
     284:	59 f0       	breq	.+22     	; 0x29c <CALLBACK_USB_GetDescriptor+0x20>
     286:	23 30       	cpi	r18, 0x03	; 3
     288:	31 05       	cpc	r19, r1
     28a:	69 f0       	breq	.+26     	; 0x2a6 <CALLBACK_USB_GetDescriptor+0x2a>
     28c:	21 30       	cpi	r18, 0x01	; 1
     28e:	31 05       	cpc	r19, r1
     290:	e9 f4       	brne	.+58     	; 0x2cc <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     292:	82 e1       	ldi	r24, 0x12	; 18
     294:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     296:	22 ee       	ldi	r18, 0xE2	; 226
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	1c c0       	rjmp	.+56     	; 0x2d4 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     29c:	80 e2       	ldi	r24, 0x20	; 32
     29e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2a0:	22 ec       	ldi	r18, 0xC2	; 194
     2a2:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2a4:	17 c0       	rjmp	.+46     	; 0x2d4 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     2a6:	99 27       	eor	r25, r25
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	91 05       	cpc	r25, r1
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x44>
     2ae:	28 f0       	brcs	.+10     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x3e>
     2b0:	02 97       	sbiw	r24, 0x02	; 2
     2b2:	61 f4       	brne	.+24     	; 0x2cc <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2b4:	e4 e7       	ldi	r30, 0x74	; 116
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     2ba:	ee eb       	ldi	r30, 0xBE	; 190
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     2c0:	e4 ea       	ldi	r30, 0xA4	; 164
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2c4:	84 91       	lpm	r24, Z
     2c6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     2c8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     2d4:	fa 01       	movw	r30, r20
     2d6:	31 83       	std	Z+1, r19	; 0x01
     2d8:	20 83       	st	Z, r18
	return Size;
}
     2da:	08 95       	ret

000002dc <spi_init>:
#include "spi.h"

// Initialisation of SPI bus
void spi_init(void)
{
SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
     2dc:	84 b1       	in	r24, 0x04	; 4
     2de:	87 60       	ori	r24, 0x07	; 7
     2e0:	84 b9       	out	0x04, r24	; 4
SPI_DDR &= ~(1<<SPI_MISO);
     2e2:	23 98       	cbi	0x04, 3	; 4
SPI_PORT |= (1<<SPI_SS);
     2e4:	28 9a       	sbi	0x05, 0	; 5
SPI_PORT |= (1<<SPI_MISO);
     2e6:	2b 9a       	sbi	0x05, 3	; 5
SPSR = (1<<SPI2X);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	8d bd       	out	0x2d, r24	; 45
SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
     2ec:	8c e5       	ldi	r24, 0x5C	; 92
     2ee:	8c bd       	out	0x2c, r24	; 44
     2f0:	08 95       	ret

000002f2 <spi_exch>:
}

// Send byte on SPI bus
uint8_t spi_exch(uint8_t output)
{
SPDR = output;
     2f2:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
     2f4:	0d b4       	in	r0, 0x2d	; 45
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <spi_exch+0x2>
return SPDR;
     2fa:	8e b5       	in	r24, 0x2e	; 46
}
     2fc:	08 95       	ret

000002fe <AT45DB641E_page_size>:

#include "spi.h"
#include "AT45DB641E.h"

// AT45DB641E page mode
void AT45DB641E_page_size(volatile uint8_t *port,int cs,int size){
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
*port &= ~(1<<cs);
     30a:	fc 01       	movw	r30, r24
     30c:	20 81       	ld	r18, Z
     30e:	01 e0       	ldi	r16, 0x01	; 1
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	01 c0       	rjmp	.+2      	; 0x316 <__stack+0x17>
     314:	00 0f       	add	r16, r16
     316:	6a 95       	dec	r22
     318:	ea f7       	brpl	.-6      	; 0x314 <__stack+0x15>
     31a:	30 2f       	mov	r19, r16
     31c:	30 95       	com	r19
     31e:	23 23       	and	r18, r19
     320:	20 83       	st	Z, r18
if(size!=256 && size!=264) return;
     322:	9a 01       	movw	r18, r20
     324:	27 7f       	andi	r18, 0xF7	; 247
     326:	21 15       	cp	r18, r1
     328:	31 40       	sbci	r19, 0x01	; 1
     32a:	99 f4       	brne	.+38     	; 0x352 <__stack+0x53>
     32c:	7a 01       	movw	r14, r20
     32e:	ec 01       	movw	r28, r24
spi_exch(0x3D);
     330:	8d e3       	ldi	r24, 0x3D	; 61
     332:	df df       	rcall	.-66     	; 0x2f2 <spi_exch>
spi_exch(0x2A);
     334:	8a e2       	ldi	r24, 0x2A	; 42
     336:	dd df       	rcall	.-70     	; 0x2f2 <spi_exch>
spi_exch(0x80);
     338:	80 e8       	ldi	r24, 0x80	; 128
     33a:	db df       	rcall	.-74     	; 0x2f2 <spi_exch>
     33c:	e1 14       	cp	r14, r1
if(size==256) spi_exch(0xA6); else spi_exch(0xA7);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	f6 06       	cpc	r15, r22
     342:	11 f4       	brne	.+4      	; 0x348 <__stack+0x49>
     344:	86 ea       	ldi	r24, 0xA6	; 166
     346:	01 c0       	rjmp	.+2      	; 0x34a <__stack+0x4b>
     348:	87 ea       	ldi	r24, 0xA7	; 167
     34a:	d3 df       	rcall	.-90     	; 0x2f2 <spi_exch>
     34c:	88 81       	ld	r24, Y
*port |= (1<<cs);
     34e:	08 2b       	or	r16, r24
     350:	08 83       	st	Y, r16
     352:	df 91       	pop	r29
}
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	08 95       	ret

00000360 <AT45DB641E_cmd>:
     360:	af 92       	push	r10

// AT45DB641E command

void AT45DB641E_cmd(volatile uint8_t *port,int cs,int cmd,uint8_t *result,int len){
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	7c 01       	movw	r14, r24
     376:	84 2f       	mov	r24, r20
     378:	59 01       	movw	r10, r18
*port &= ~(1<<cs);
     37a:	f7 01       	movw	r30, r14
     37c:	90 81       	ld	r25, Z
     37e:	c1 e0       	ldi	r28, 0x01	; 1
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <AT45DB641E_cmd+0x26>
     384:	cc 0f       	add	r28, r28
     386:	6a 95       	dec	r22
     388:	ea f7       	brpl	.-6      	; 0x384 <AT45DB641E_cmd+0x24>
     38a:	2c 2f       	mov	r18, r28
     38c:	20 95       	com	r18
     38e:	92 23       	and	r25, r18
     390:	90 83       	st	Z, r25
spi_exch(cmd);
     392:	af df       	rcall	.-162    	; 0x2f2 <spi_exch>
int i;
for(i=0;i<len;i++) result[i]=spi_exch(0);
     394:	65 01       	movw	r12, r10
     396:	c6 01       	movw	r24, r12
     398:	8a 19       	sub	r24, r10
     39a:	9b 09       	sbc	r25, r11
     39c:	80 17       	cp	r24, r16
     39e:	91 07       	cpc	r25, r17
     3a0:	34 f4       	brge	.+12     	; 0x3ae <AT45DB641E_cmd+0x4e>
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	a6 df       	rcall	.-180    	; 0x2f2 <spi_exch>
     3a6:	f6 01       	movw	r30, r12
     3a8:	81 93       	st	Z+, r24
     3aa:	6f 01       	movw	r12, r30
     3ac:	f4 cf       	rjmp	.-24     	; 0x396 <AT45DB641E_cmd+0x36>
*port |= (1<<cs);
     3ae:	f7 01       	movw	r30, r14
     3b0:	80 81       	ld	r24, Z
     3b2:	c8 2b       	or	r28, r24
     3b4:	c0 83       	st	Z, r28
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	08 95       	ret

000003cc <AT45DB641E_busy>:

// AT45DB641E test busy

unsigned char AT45DB641E_busy(volatile uint8_t *port,int cs){
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <AT45DB641E_busy+0xa>
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
unsigned char status[2];
AT45DB641E_cmd(port,cs,AT45DB641E_Status,status,2);
     3da:	02 e0       	ldi	r16, 0x02	; 2
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	9e 01       	movw	r18, r28
     3e0:	2f 5f       	subi	r18, 0xFF	; 255
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	47 ed       	ldi	r20, 0xD7	; 215
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	bb df       	rcall	.-138    	; 0x360 <AT45DB641E_cmd>
return status[0]&0x80?0:1;
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	80 95       	com	r24
}
     3ee:	88 1f       	adc	r24, r24
     3f0:	88 27       	eor	r24, r24
     3f2:	88 1f       	adc	r24, r24
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <AT45DB641E_write_buffer>:

// AT45DB641E write into first buffer

void AT45DB641E_write_buffer(volatile uint8_t *port,int cs,unsigned char *data,int len,unsigned char synfin){
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	7c 01       	movw	r14, r24
     416:	16 2f       	mov	r17, r22
     418:	b7 2e       	mov	r11, r23
     41a:	ea 01       	movw	r28, r20
     41c:	69 01       	movw	r12, r18
int i;
if(synfin&SEQ_START){
     41e:	00 ff       	sbrs	r16, 0
     420:	13 c0       	rjmp	.+38     	; 0x448 <AT45DB641E_write_buffer+0x46>
  *port &= ~(1<<cs);
     422:	fc 01       	movw	r30, r24
     424:	20 81       	ld	r18, Z
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	01 c0       	rjmp	.+2      	; 0x42e <AT45DB641E_write_buffer+0x2c>
     42c:	88 0f       	add	r24, r24
     42e:	6a 95       	dec	r22
     430:	ea f7       	brpl	.-6      	; 0x42c <AT45DB641E_write_buffer+0x2a>
     432:	80 95       	com	r24
     434:	82 23       	and	r24, r18
     436:	80 83       	st	Z, r24
  spi_exch(0x84);
     438:	84 e8       	ldi	r24, 0x84	; 132
     43a:	5b df       	rcall	.-330    	; 0x2f2 <spi_exch>
  for(i=0;i<3;i++) spi_exch(0x00);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	59 df       	rcall	.-334    	; 0x2f2 <spi_exch>
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	57 df       	rcall	.-338    	; 0x2f2 <spi_exch>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	55 df       	rcall	.-342    	; 0x2f2 <spi_exch>
  }
if(data!=NULL && len>0)
     448:	20 97       	sbiw	r28, 0x00	; 0
     44a:	71 f4       	brne	.+28     	; 0x468 <AT45DB641E_write_buffer+0x66>
  for(i=0;i<len;i++) spi_exch(data[i]);
if(synfin&SEQ_STOP){
     44c:	01 ff       	sbrs	r16, 1
     44e:	1d c0       	rjmp	.+58     	; 0x48a <AT45DB641E_write_buffer+0x88>
  *port |= (1<<cs);
     450:	f7 01       	movw	r30, r14
     452:	20 81       	ld	r18, Z
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 2e       	mov	r0, r17
     45a:	01 c0       	rjmp	.+2      	; 0x45e <AT45DB641E_write_buffer+0x5c>
     45c:	88 0f       	add	r24, r24
     45e:	0a 94       	dec	r0
     460:	ea f7       	brpl	.-6      	; 0x45c <AT45DB641E_write_buffer+0x5a>
     462:	82 2b       	or	r24, r18
     464:	80 83       	st	Z, r24
  while(AT45DB641E_busy(port,cs));
     466:	0b c0       	rjmp	.+22     	; 0x47e <AT45DB641E_write_buffer+0x7c>
if(synfin&SEQ_START){
  *port &= ~(1<<cs);
  spi_exch(0x84);
  for(i=0;i<3;i++) spi_exch(0x00);
  }
if(data!=NULL && len>0)
     468:	1c 14       	cp	r1, r12
     46a:	1d 04       	cpc	r1, r13
     46c:	7c f7       	brge	.-34     	; 0x44c <AT45DB641E_write_buffer+0x4a>
     46e:	cc 0e       	add	r12, r28
  for(i=0;i<len;i++) spi_exch(data[i]);
     470:	dd 1e       	adc	r13, r29
     472:	89 91       	ld	r24, Y+
     474:	3e df       	rcall	.-388    	; 0x2f2 <spi_exch>
     476:	cc 15       	cp	r28, r12
     478:	dd 05       	cpc	r29, r13
     47a:	d9 f7       	brne	.-10     	; 0x472 <AT45DB641E_write_buffer+0x70>
if(synfin&SEQ_STOP){
  *port |= (1<<cs);
  while(AT45DB641E_busy(port,cs));
     47c:	e7 cf       	rjmp	.-50     	; 0x44c <AT45DB641E_write_buffer+0x4a>
     47e:	61 2f       	mov	r22, r17
     480:	7b 2d       	mov	r23, r11
     482:	c7 01       	movw	r24, r14
     484:	a3 df       	rcall	.-186    	; 0x3cc <AT45DB641E_busy>
     486:	81 11       	cpse	r24, r1
     488:	fa cf       	rjmp	.-12     	; 0x47e <AT45DB641E_write_buffer+0x7c>
  }
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	bf 90       	pop	r11
     49c:	08 95       	ret

0000049e <AT45DB641E_write_page>:

// AT45DB641E write first buffer into a flash page

void AT45DB641E_write_page(volatile uint8_t *port,int cs,int address){
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	8c 01       	movw	r16, r24
     4b0:	f6 2e       	mov	r15, r22
     4b2:	e7 2e       	mov	r14, r23
     4b4:	d4 2e       	mov	r13, r20
     4b6:	c5 2e       	mov	r12, r21
*port &= ~(1<<cs);
     4b8:	fc 01       	movw	r30, r24
     4ba:	80 81       	ld	r24, Z
     4bc:	c1 e0       	ldi	r28, 0x01	; 1
     4be:	d0 e0       	ldi	r29, 0x00	; 0
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <AT45DB641E_write_page+0x26>
     4c2:	cc 0f       	add	r28, r28
     4c4:	6a 95       	dec	r22
     4c6:	ea f7       	brpl	.-6      	; 0x4c2 <AT45DB641E_write_page+0x24>
     4c8:	9c 2f       	mov	r25, r28
     4ca:	90 95       	com	r25
     4cc:	89 23       	and	r24, r25
     4ce:	80 83       	st	Z, r24
spi_exch(0x83);
     4d0:	83 e8       	ldi	r24, 0x83	; 131
     4d2:	0f df       	rcall	.-482    	; 0x2f2 <spi_exch>
spi_exch((address>>8)&0x7f);
     4d4:	8c 2d       	mov	r24, r12
     4d6:	8f 77       	andi	r24, 0x7F	; 127
     4d8:	0c df       	rcall	.-488    	; 0x2f2 <spi_exch>
spi_exch(address&0xff);
     4da:	8d 2d       	mov	r24, r13
     4dc:	0a df       	rcall	.-492    	; 0x2f2 <spi_exch>
spi_exch(0x00);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 df       	rcall	.-496    	; 0x2f2 <spi_exch>
     4e2:	f8 01       	movw	r30, r16
*port |= (1<<cs);
     4e4:	80 81       	ld	r24, Z
     4e6:	c8 2b       	or	r28, r24
     4e8:	c0 83       	st	Z, r28
while(AT45DB641E_busy(port,cs));
     4ea:	6f 2d       	mov	r22, r15
     4ec:	7e 2d       	mov	r23, r14
     4ee:	c8 01       	movw	r24, r16
     4f0:	6d df       	rcall	.-294    	; 0x3cc <AT45DB641E_busy>
     4f2:	81 11       	cpse	r24, r1
     4f4:	fa cf       	rjmp	.-12     	; 0x4ea <AT45DB641E_write_page+0x4c>
     4f6:	df 91       	pop	r29
}
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	08 95       	ret

00000508 <AT45DB641E_read_page>:
     508:	9f 92       	push	r9

// AT45DB641E read

void AT45DB641E_read_page(volatile uint8_t *port,int cs,int address,unsigned char *data,int len,unsigned char synfin){
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	6c 01       	movw	r12, r24
     520:	f6 2e       	mov	r15, r22
     522:	b7 2e       	mov	r11, r23
     524:	a4 2e       	mov	r10, r20
     526:	95 2e       	mov	r9, r21
     528:	e9 01       	movw	r28, r18
int i;
if(synfin&SEQ_START){
     52a:	e0 fe       	sbrs	r14, 0
     52c:	18 c0       	rjmp	.+48     	; 0x55e <AT45DB641E_read_page+0x56>
  *port &= ~(1<<cs);
     52e:	fc 01       	movw	r30, r24
     530:	20 81       	ld	r18, Z
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	01 c0       	rjmp	.+2      	; 0x53a <AT45DB641E_read_page+0x32>
     538:	88 0f       	add	r24, r24
     53a:	6a 95       	dec	r22
     53c:	ea f7       	brpl	.-6      	; 0x538 <AT45DB641E_read_page+0x30>
     53e:	80 95       	com	r24
     540:	82 23       	and	r24, r18
     542:	80 83       	st	Z, r24
  spi_exch(0x1B);
     544:	8b e1       	ldi	r24, 0x1B	; 27
     546:	d5 de       	rcall	.-598    	; 0x2f2 <spi_exch>
  spi_exch((address>>8)&0x7f);
     548:	89 2d       	mov	r24, r9
     54a:	8f 77       	andi	r24, 0x7F	; 127
     54c:	d2 de       	rcall	.-604    	; 0x2f2 <spi_exch>
  spi_exch(address&0xff);
     54e:	8a 2d       	mov	r24, r10
     550:	d0 de       	rcall	.-608    	; 0x2f2 <spi_exch>
  for(i=0;i<3;i++) spi_exch(0x00);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	ce de       	rcall	.-612    	; 0x2f2 <spi_exch>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	cc de       	rcall	.-616    	; 0x2f2 <spi_exch>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	ca de       	rcall	.-620    	; 0x2f2 <spi_exch>
     55e:	20 97       	sbiw	r28, 0x00	; 0
  }
if(data!=NULL && len>0)
     560:	71 f4       	brne	.+28     	; 0x57e <AT45DB641E_read_page+0x76>
     562:	e1 fe       	sbrs	r14, 1
  for(i=0;i<len;i++) data[i]=spi_exch(0x00);
if(synfin&SEQ_STOP){
     564:	1e c0       	rjmp	.+60     	; 0x5a2 <AT45DB641E_read_page+0x9a>
     566:	f6 01       	movw	r30, r12
  *port |= (1<<cs);
     568:	20 81       	ld	r18, Z
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0f 2c       	mov	r0, r15
     570:	01 c0       	rjmp	.+2      	; 0x574 <AT45DB641E_read_page+0x6c>
     572:	88 0f       	add	r24, r24
     574:	0a 94       	dec	r0
     576:	ea f7       	brpl	.-6      	; 0x572 <AT45DB641E_read_page+0x6a>
     578:	82 2b       	or	r24, r18
     57a:	80 83       	st	Z, r24
     57c:	0c c0       	rjmp	.+24     	; 0x596 <AT45DB641E_read_page+0x8e>
   while(AT45DB641E_busy(port,cs));
     57e:	10 16       	cp	r1, r16
  spi_exch(0x1B);
  spi_exch((address>>8)&0x7f);
  spi_exch(address&0xff);
  for(i=0;i<3;i++) spi_exch(0x00);
  }
if(data!=NULL && len>0)
     580:	11 06       	cpc	r1, r17
     582:	7c f7       	brge	.-34     	; 0x562 <AT45DB641E_read_page+0x5a>
     584:	0c 0f       	add	r16, r28
     586:	1d 1f       	adc	r17, r29
  for(i=0;i<len;i++) data[i]=spi_exch(0x00);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	b3 de       	rcall	.-666    	; 0x2f2 <spi_exch>
     58c:	89 93       	st	Y+, r24
     58e:	c0 17       	cp	r28, r16
     590:	d1 07       	cpc	r29, r17
     592:	d1 f7       	brne	.-12     	; 0x588 <AT45DB641E_read_page+0x80>
     594:	e6 cf       	rjmp	.-52     	; 0x562 <AT45DB641E_read_page+0x5a>
if(synfin&SEQ_STOP){
  *port |= (1<<cs);
   while(AT45DB641E_busy(port,cs));
     596:	6f 2d       	mov	r22, r15
     598:	7b 2d       	mov	r23, r11
     59a:	c6 01       	movw	r24, r12
     59c:	17 df       	rcall	.-466    	; 0x3cc <AT45DB641E_busy>
     59e:	81 11       	cpse	r24, r1
     5a0:	fa cf       	rjmp	.-12     	; 0x596 <AT45DB641E_read_page+0x8e>
     5a2:	df 91       	pop	r29
  }
}
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <DataflashManager_Initialisation>:
#include "spi.h"
#include "AT45DB641E.h"

void DataflashManager_Initialisation(void) // a nous de definir localisation memoire et les inisialiser a 256
{
MEM1_DDR |= (1<<MEM1_PIN);
     5ba:	27 9a       	sbi	0x04, 7	; 4
MEM2_DDR |= (1<<MEM2_PIN);
     5bc:	26 9a       	sbi	0x04, 6	; 4
MEM3_DDR |= (1<<MEM3_PIN);
     5be:	25 9a       	sbi	0x04, 5	; 4
MEM4_DDR |= (1<<MEM4_PIN);
     5c0:	24 9a       	sbi	0x04, 4	; 4

MEM1_PORT |= (1<<MEM1_PIN);
     5c2:	2f 9a       	sbi	0x05, 7	; 5
MEM2_PORT |= (1<<MEM2_PIN);
     5c4:	2e 9a       	sbi	0x05, 6	; 5
MEM3_PORT |= (1<<MEM3_PIN);
     5c6:	2d 9a       	sbi	0x05, 5	; 5
MEM4_PORT |= (1<<MEM4_PIN);
     5c8:	2c 9a       	sbi	0x05, 4	; 5

MEM_RESET_DDR |= (1<<MEM_RESET_PIN);
     5ca:	3f 9a       	sbi	0x07, 7	; 7
MEM_RESET_PORT |= (1<<MEM_RESET_PIN);
     5cc:	47 9a       	sbi	0x08, 7	; 8
spi_init();
     5ce:	86 de       	rcall	.-756    	; 0x2dc <spi_init>

AT45DB641E_page_size(&MEM1_PORT,MEM1_PIN,256);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	51 e0       	ldi	r21, 0x01	; 1
     5d4:	67 e0       	ldi	r22, 0x07	; 7
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	85 e2       	ldi	r24, 0x25	; 37
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 de       	rcall	.-736    	; 0x2fe <AT45DB641E_page_size>
AT45DB641E_page_size(&MEM2_PORT,MEM2_PIN,256);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	51 e0       	ldi	r21, 0x01	; 1
     5e2:	66 e0       	ldi	r22, 0x06	; 6
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	85 e2       	ldi	r24, 0x25	; 37
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	89 de       	rcall	.-750    	; 0x2fe <AT45DB641E_page_size>
AT45DB641E_page_size(&MEM3_PORT,MEM3_PIN,256);
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	51 e0       	ldi	r21, 0x01	; 1
     5f0:	65 e0       	ldi	r22, 0x05	; 5
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	85 e2       	ldi	r24, 0x25	; 37
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	82 de       	rcall	.-764    	; 0x2fe <AT45DB641E_page_size>
AT45DB641E_page_size(&MEM4_PORT,MEM4_PIN,256);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	51 e0       	ldi	r21, 0x01	; 1
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	85 e2       	ldi	r24, 0x25	; 37
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	7b ce       	rjmp	.-778    	; 0x2fe <AT45DB641E_page_size>

00000608 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     608:	2f 92       	push	r2
     60a:	3f 92       	push	r3
     60c:	4f 92       	push	r4
     60e:	5f 92       	push	r5
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	27 97       	sbiw	r28, 0x07	; 7
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	9b 83       	std	Y+3, r25	; 0x03
     63c:	8a 83       	std	Y+2, r24	; 0x02
     63e:	6a 01       	movw	r12, r20
     640:	7b 01       	movw	r14, r22
     642:	59 01       	movw	r10, r18
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady()) return;
     644:	7c d6       	rcall	.+3320   	; 0x133e <Endpoint_WaitUntilReady>
     646:	81 11       	cpse	r24, r1
     648:	f7 c0       	rjmp	.+494    	; 0x838 <DataflashManager_WriteBlocks+0x230>
     64a:	b7 01       	movw	r22, r14
     64c:	a6 01       	movw	r20, r12
     64e:	41 50       	subi	r20, 0x01	; 1
     650:	51 09       	sbc	r21, r1
     652:	61 09       	sbc	r22, r1
     654:	71 09       	sbc	r23, r1
     656:	c1 2c       	mov	r12, r1
     658:	d1 2c       	mov	r13, r1

	int i,j;
	for(i=0;i<TotalBlocks;i++){ 
     65a:	ca 14       	cp	r12, r10
     65c:	db 04       	cpc	r13, r11
     65e:	09 f4       	brne	.+2      	; 0x662 <DataflashManager_WriteBlocks+0x5a>
     660:	e2 c0       	rjmp	.+452    	; 0x826 <DataflashManager_WriteBlocks+0x21e>
     662:	2a 01       	movw	r4, r20
     664:	3b 01       	movw	r6, r22
     666:	af ef       	ldi	r26, 0xFF	; 255
     668:	4a 1a       	sub	r4, r26
     66a:	5a 0a       	sbc	r5, r26
     66c:	6a 0a       	sbc	r6, r26
     66e:	7a 0a       	sbc	r7, r26
                // Memoire 3
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
                    if (j==0){ AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,&byte,1,SEQ_START);}
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2 -1){  
                        AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,&byte,1,SEQ_STOP); 
                        AT45DB641E_write_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2);
     670:	76 95       	lsr	r23
     672:	67 95       	ror	r22
     674:	57 95       	ror	r21
     676:	47 95       	ror	r20
     678:	4a 01       	movw	r8, r20
                // Memoire 1
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
                    if (j==0){ AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,&byte,1,SEQ_START);}
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
                        AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,&byte,1,SEQ_STOP); 
                        AT45DB641E_write_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2);
     67a:	d3 01       	movw	r26, r6
     67c:	c2 01       	movw	r24, r4
     67e:	b6 95       	lsr	r27
     680:	a7 95       	ror	r26
     682:	97 95       	ror	r25
     684:	87 95       	ror	r24
     686:	1c 01       	movw	r2, r24
     688:	e1 2c       	mov	r14, r1
     68a:	f1 2c       	mov	r15, r1
			}
			/* Read one byte from USB host */
			uint8_t byte=Endpoint_Read_8();
			/* Store byte in memory at address BlockAddress+i*VIRTUAL_MEMORY_BLOCK_SIZE+j */
			//// A NOUS DE FAIRE // i paire mem 1 et 2 et impaire mem 3 4 ducoup on ecrit sur 1 et 2 si y a que 512 / ici on ecrit et danss la prochaine fonction on va lire
			if ((BlockAddress+i) % 2 == 0){
     68c:	d3 01       	movw	r26, r6
     68e:	c2 01       	movw	r24, r4
     690:	81 70       	andi	r24, 0x01	; 1
     692:	99 27       	eor	r25, r25
     694:	aa 27       	eor	r26, r26
     696:	bb 27       	eor	r27, r27
     698:	8c 83       	std	Y+4, r24	; 0x04
     69a:	9d 83       	std	Y+5, r25	; 0x05
     69c:	ae 83       	std	Y+6, r26	; 0x06
     69e:	bf 83       	std	Y+7, r27	; 0x07
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	int i,j;
	for(i=0;i<TotalBlocks;i++){ 
		for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE;j++){
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     6a4:	85 ff       	sbrs	r24, 5
     6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <DataflashManager_WriteBlocks+0xb8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     6a8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				Endpoint_ClearOUT();
				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady()) return;
			}
			/* Read one byte from USB host */
			uint8_t byte=Endpoint_Read_8();
     6ac:	89 83       	std	Y+1, r24	; 0x01
			/* Store byte in memory at address BlockAddress+i*VIRTUAL_MEMORY_BLOCK_SIZE+j */
			//// A NOUS DE FAIRE // i paire mem 1 et 2 et impaire mem 3 4 ducoup on ecrit sur 1 et 2 si y a que 512 / ici on ecrit et danss la prochaine fonction on va lire
			if ((BlockAddress+i) % 2 == 0){
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	9d 81       	ldd	r25, Y+5	; 0x05
     6b2:	ae 81       	ldd	r26, Y+6	; 0x06
     6b4:	bf 81       	ldd	r27, Y+7	; 0x07
     6b6:	89 2b       	or	r24, r25
     6b8:	8a 2b       	or	r24, r26
     6ba:	8b 2b       	or	r24, r27
     6bc:	51 f0       	breq	.+20     	; 0x6d2 <DataflashManager_WriteBlocks+0xca>
     6be:	52 c0       	rjmp	.+164    	; 0x764 <DataflashManager_WriteBlocks+0x15c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6c4:	8b 77       	andi	r24, 0x7B	; 123
     6c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			if (!(Endpoint_IsReadWriteAllowed()))
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();
				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady()) return;
     6ca:	39 d6       	rcall	.+3186   	; 0x133e <Endpoint_WaitUntilReady>
     6cc:	88 23       	and	r24, r24
     6ce:	61 f3       	breq	.-40     	; 0x6a8 <DataflashManager_WriteBlocks+0xa0>
     6d0:	b3 c0       	rjmp	.+358    	; 0x838 <DataflashManager_WriteBlocks+0x230>
			uint8_t byte=Endpoint_Read_8();
			/* Store byte in memory at address BlockAddress+i*VIRTUAL_MEMORY_BLOCK_SIZE+j */
			//// A NOUS DE FAIRE // i paire mem 1 et 2 et impaire mem 3 4 ducoup on ecrit sur 1 et 2 si y a que 512 / ici on ecrit et danss la prochaine fonction on va lire
			if ((BlockAddress+i) % 2 == 0){
                // Memoire 1
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
     6d2:	9f ef       	ldi	r25, 0xFF	; 255
     6d4:	e9 16       	cp	r14, r25
     6d6:	f1 04       	cpc	r15, r1
     6d8:	09 f0       	breq	.+2      	; 0x6dc <DataflashManager_WriteBlocks+0xd4>
     6da:	0c f5       	brge	.+66     	; 0x71e <DataflashManager_WriteBlocks+0x116>
                    if (j==0){ AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,&byte,1,SEQ_START);}
     6dc:	e1 14       	cp	r14, r1
     6de:	f1 04       	cpc	r15, r1
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <DataflashManager_WriteBlocks+0xde>
     6e2:	01 e0       	ldi	r16, 0x01	; 1
     6e4:	14 c0       	rjmp	.+40     	; 0x70e <DataflashManager_WriteBlocks+0x106>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
     6e6:	af ef       	ldi	r26, 0xFF	; 255
     6e8:	ea 16       	cp	r14, r26
     6ea:	f1 04       	cpc	r15, r1
     6ec:	79 f4       	brne	.+30     	; 0x70c <DataflashManager_WriteBlocks+0x104>
                        AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,&byte,1,SEQ_STOP); 
     6ee:	02 e0       	ldi	r16, 0x02	; 2
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	ae 01       	movw	r20, r28
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	85 e2       	ldi	r24, 0x25	; 37
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	7f de       	rcall	.-770    	; 0x402 <AT45DB641E_write_buffer>
                        AT45DB641E_write_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2);
     704:	a1 01       	movw	r20, r2
     706:	67 e0       	ldi	r22, 0x07	; 7
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	6b c0       	rjmp	.+214    	; 0x7e2 <DataflashManager_WriteBlocks+0x1da>
                    }
                    else { AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,&byte,1,0);}
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	ae 01       	movw	r20, r28
     714:	4f 5f       	subi	r20, 0xFF	; 255
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	67 e0       	ldi	r22, 0x07	; 7
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	6e c0       	rjmp	.+220    	; 0x7fa <DataflashManager_WriteBlocks+0x1f2>
                }
                // Memoire 2 on commence a ecrire a 256
                else if (j < VIRTUAL_MEMORY_BLOCK_SIZE) {
                    if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2){ AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,&byte,1,SEQ_START);}
     71e:	e1 14       	cp	r14, r1
     720:	b1 e0       	ldi	r27, 0x01	; 1
     722:	fb 06       	cpc	r15, r27
     724:	11 f4       	brne	.+4      	; 0x72a <DataflashManager_WriteBlocks+0x122>
     726:	01 e0       	ldi	r16, 0x01	; 1
     728:	15 c0       	rjmp	.+42     	; 0x754 <DataflashManager_WriteBlocks+0x14c>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE-1){  
     72a:	ef ef       	ldi	r30, 0xFF	; 255
     72c:	ee 16       	cp	r14, r30
     72e:	e1 e0       	ldi	r30, 0x01	; 1
     730:	fe 06       	cpc	r15, r30
     732:	79 f4       	brne	.+30     	; 0x752 <DataflashManager_WriteBlocks+0x14a>
                        AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,&byte,1,SEQ_STOP); 
     734:	02 e0       	ldi	r16, 0x02	; 2
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	ae 01       	movw	r20, r28
     73c:	4f 5f       	subi	r20, 0xFF	; 255
     73e:	5f 4f       	sbci	r21, 0xFF	; 255
     740:	66 e0       	ldi	r22, 0x06	; 6
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	85 e2       	ldi	r24, 0x25	; 37
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	5c de       	rcall	.-840    	; 0x402 <AT45DB641E_write_buffer>
                        AT45DB641E_write_page(&MEM2_PORT,MEM2_PIN,(BlockAddress+i)/2);
     74a:	a1 01       	movw	r20, r2
     74c:	66 e0       	ldi	r22, 0x06	; 6
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	48 c0       	rjmp	.+144    	; 0x7e2 <DataflashManager_WriteBlocks+0x1da>
                        
                    }
                    else { AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,&byte,1,0);}
     752:	00 e0       	ldi	r16, 0x00	; 0
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	ae 01       	movw	r20, r28
     75a:	4f 5f       	subi	r20, 0xFF	; 255
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	66 e0       	ldi	r22, 0x06	; 6
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	4b c0       	rjmp	.+150    	; 0x7fa <DataflashManager_WriteBlocks+0x1f2>
                }
            }
			else {
                // Memoire 3
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
     764:	ff ef       	ldi	r31, 0xFF	; 255
     766:	ef 16       	cp	r14, r31
     768:	f1 04       	cpc	r15, r1
     76a:	09 f0       	breq	.+2      	; 0x76e <DataflashManager_WriteBlocks+0x166>
     76c:	0c f5       	brge	.+66     	; 0x7b0 <DataflashManager_WriteBlocks+0x1a8>
                    if (j==0){ AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,&byte,1,SEQ_START);}
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	11 f4       	brne	.+4      	; 0x778 <DataflashManager_WriteBlocks+0x170>
     774:	01 e0       	ldi	r16, 0x01	; 1
     776:	14 c0       	rjmp	.+40     	; 0x7a0 <DataflashManager_WriteBlocks+0x198>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2 -1){  
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	e8 16       	cp	r14, r24
     77c:	f1 04       	cpc	r15, r1
     77e:	79 f4       	brne	.+30     	; 0x79e <DataflashManager_WriteBlocks+0x196>
                        AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,&byte,1,SEQ_STOP); 
     780:	02 e0       	ldi	r16, 0x02	; 2
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	ae 01       	movw	r20, r28
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	65 e0       	ldi	r22, 0x05	; 5
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	85 e2       	ldi	r24, 0x25	; 37
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	36 de       	rcall	.-916    	; 0x402 <AT45DB641E_write_buffer>
                        AT45DB641E_write_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2);
     796:	a4 01       	movw	r20, r8
     798:	65 e0       	ldi	r22, 0x05	; 5
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	22 c0       	rjmp	.+68     	; 0x7e2 <DataflashManager_WriteBlocks+0x1da>
                        
                    }
                    else { AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,&byte,1,0);}
     79e:	00 e0       	ldi	r16, 0x00	; 0
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	ae 01       	movw	r20, r28
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	65 e0       	ldi	r22, 0x05	; 5
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	25 c0       	rjmp	.+74     	; 0x7fa <DataflashManager_WriteBlocks+0x1f2>
                }
                // Memoire 4 on commence a ecrire a 256
                else if (j < VIRTUAL_MEMORY_BLOCK_SIZE) {
                    if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2){ AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,&byte,1,SEQ_START);}
     7b0:	e1 14       	cp	r14, r1
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	f9 06       	cpc	r15, r25
     7b6:	11 f4       	brne	.+4      	; 0x7bc <DataflashManager_WriteBlocks+0x1b4>
     7b8:	01 e0       	ldi	r16, 0x01	; 1
     7ba:	18 c0       	rjmp	.+48     	; 0x7ec <DataflashManager_WriteBlocks+0x1e4>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE-1){  
     7bc:	af ef       	ldi	r26, 0xFF	; 255
     7be:	ea 16       	cp	r14, r26
     7c0:	a1 e0       	ldi	r26, 0x01	; 1
     7c2:	fa 06       	cpc	r15, r26
     7c4:	91 f4       	brne	.+36     	; 0x7ea <DataflashManager_WriteBlocks+0x1e2>
                        AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,&byte,1,SEQ_STOP); 
     7c6:	02 e0       	ldi	r16, 0x02	; 2
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	ae 01       	movw	r20, r28
     7ce:	4f 5f       	subi	r20, 0xFF	; 255
     7d0:	5f 4f       	sbci	r21, 0xFF	; 255
     7d2:	64 e0       	ldi	r22, 0x04	; 4
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	85 e2       	ldi	r24, 0x25	; 37
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	13 de       	rcall	.-986    	; 0x402 <AT45DB641E_write_buffer>
                        AT45DB641E_write_page(&MEM4_PORT,MEM4_PIN,(BlockAddress+i-1)/2);
     7dc:	a4 01       	movw	r20, r8
     7de:	64 e0       	ldi	r22, 0x04	; 4
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	85 e2       	ldi	r24, 0x25	; 37
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	5b de       	rcall	.-842    	; 0x49e <AT45DB641E_write_page>
     7e8:	0b c0       	rjmp	.+22     	; 0x800 <DataflashManager_WriteBlocks+0x1f8>
     7ea:	00 e0       	ldi	r16, 0x00	; 0
                        
                    }
                    else { AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,&byte,1,0);}
     7ec:	21 e0       	ldi	r18, 0x01	; 1
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	ae 01       	movw	r20, r28
     7f2:	4f 5f       	subi	r20, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	64 e0       	ldi	r22, 0x04	; 4
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	85 e2       	ldi	r24, 0x25	; 37
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	01 de       	rcall	.-1022   	; 0x402 <AT45DB641E_write_buffer>
     800:	ea 81       	ldd	r30, Y+2	; 0x02
                
                }
            }
			if (MSInterfaceInfo->State.IsMassStoreReset) return;
     802:	fb 81       	ldd	r31, Y+3	; 0x03
     804:	80 ad       	ldd	r24, Z+56	; 0x38
     806:	81 11       	cpse	r24, r1
     808:	17 c0       	rjmp	.+46     	; 0x838 <DataflashManager_WriteBlocks+0x230>
     80a:	ff ef       	ldi	r31, 0xFF	; 255
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady()) return;

	int i,j;
	for(i=0;i<TotalBlocks;i++){ 
		for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE;j++){
     80c:	ef 1a       	sub	r14, r31
     80e:	ff 0a       	sbc	r15, r31
     810:	e1 14       	cp	r14, r1
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	f8 06       	cpc	r15, r24
     816:	09 f0       	breq	.+2      	; 0x81a <DataflashManager_WriteBlocks+0x212>
     818:	43 cf       	rjmp	.-378    	; 0x6a0 <DataflashManager_WriteBlocks+0x98>
     81a:	9f ef       	ldi	r25, 0xFF	; 255
{
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady()) return;

	int i,j;
	for(i=0;i<TotalBlocks;i++){ 
     81c:	c9 1a       	sub	r12, r25
     81e:	d9 0a       	sbc	r13, r25
     820:	b3 01       	movw	r22, r6
     822:	a2 01       	movw	r20, r4
     824:	1a cf       	rjmp	.-460    	; 0x65a <DataflashManager_WriteBlocks+0x52>
     826:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     82a:	85 fd       	sbrc	r24, 5
			if (MSInterfaceInfo->State.IsMassStoreReset) return;
		}

	}
	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed())) Endpoint_ClearOUT();
     82c:	05 c0       	rjmp	.+10     	; 0x838 <DataflashManager_WriteBlocks+0x230>
     82e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     832:	8b 77       	andi	r24, 0x7B	; 123
     834:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     838:	27 96       	adiw	r28, 0x07	; 7
}
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	3f 90       	pop	r3
     864:	2f 90       	pop	r2
     866:	08 95       	ret

00000868 <DataflashManager_Erase>:
     868:	0f 93       	push	r16

/////// MOI
void DataflashManager_Erase(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
    int j;
    //Memoire1
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
     86e:	c0 e0       	ldi	r28, 0x00	; 0
     870:	d0 e0       	ldi	r29, 0x00	; 0
                    if (j==0){ AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,0x00,1,SEQ_START);}
     872:	20 97       	sbiw	r28, 0x00	; 0
     874:	11 f4       	brne	.+4      	; 0x87a <DataflashManager_Erase+0x12>
     876:	01 e0       	ldi	r16, 0x01	; 1
     878:	06 c0       	rjmp	.+12     	; 0x886 <DataflashManager_Erase+0x1e>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
     87a:	cf 3f       	cpi	r28, 0xFF	; 255
     87c:	d1 05       	cpc	r29, r1
     87e:	11 f4       	brne	.+4      	; 0x884 <DataflashManager_Erase+0x1c>
                        AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,0x00,1,SEQ_STOP);
     880:	02 e0       	ldi	r16, 0x02	; 2
     882:	01 c0       	rjmp	.+2      	; 0x886 <DataflashManager_Erase+0x1e>
                    }
                    else { AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,0x00,1,0);}
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	67 e0       	ldi	r22, 0x07	; 7
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	85 e2       	ldi	r24, 0x25	; 37
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	b5 dd       	rcall	.-1174   	; 0x402 <AT45DB641E_write_buffer>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
    int j;
    //Memoire1
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
     898:	21 96       	adiw	r28, 0x01	; 1
     89a:	c1 15       	cp	r28, r1
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	d8 07       	cpc	r29, r24
     8a0:	41 f7       	brne	.-48     	; 0x872 <DataflashManager_Erase+0xa>
     8a2:	c0 e0       	ldi	r28, 0x00	; 0
     8a4:	d0 e0       	ldi	r29, 0x00	; 0
                    }
                    else { AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,0x00,1,0);}
                }
            
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM1_PORT,MEM1_PIN,j);}
     8a6:	ae 01       	movw	r20, r28
     8a8:	67 e0       	ldi	r22, 0x07	; 7
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	85 e2       	ldi	r24, 0x25	; 37
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	f6 dd       	rcall	.-1044   	; 0x49e <AT45DB641E_write_page>
                        AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,0x00,1,SEQ_STOP);
                    }
                    else { AT45DB641E_write_buffer(&MEM1_PORT,MEM1_PIN,0x00,1,0);}
                }
            
    for(j=0;j<16;j++){
     8b2:	21 96       	adiw	r28, 0x01	; 1
     8b4:	c0 31       	cpi	r28, 0x10	; 16
     8b6:	d1 05       	cpc	r29, r1
     8b8:	b1 f7       	brne	.-20     	; 0x8a6 <DataflashManager_Erase+0x3e>
     8ba:	c0 e0       	ldi	r28, 0x00	; 0
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
        AT45DB641E_write_page(&MEM1_PORT,MEM1_PIN,j);}

    
    //Memoire2
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
                    if (j==0){ AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,0x00,1,SEQ_START);}
     8be:	20 97       	sbiw	r28, 0x00	; 0
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <DataflashManager_Erase+0x5e>
     8c2:	01 e0       	ldi	r16, 0x01	; 1
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <DataflashManager_Erase+0x6a>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
     8c6:	cf 3f       	cpi	r28, 0xFF	; 255
     8c8:	d1 05       	cpc	r29, r1
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <DataflashManager_Erase+0x68>
                        AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,0x00,1,SEQ_STOP);
     8cc:	02 e0       	ldi	r16, 0x02	; 2
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <DataflashManager_Erase+0x6a>
                    }
                    else { AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,0x00,1,0);}
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	66 e0       	ldi	r22, 0x06	; 6
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	85 e2       	ldi	r24, 0x25	; 37
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	8f dd       	rcall	.-1250   	; 0x402 <AT45DB641E_write_buffer>
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM1_PORT,MEM1_PIN,j);}

    
    //Memoire2
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
     8e4:	21 96       	adiw	r28, 0x01	; 1
     8e6:	c1 15       	cp	r28, r1
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	d8 07       	cpc	r29, r24
     8ec:	41 f7       	brne	.-48     	; 0x8be <DataflashManager_Erase+0x56>
     8ee:	c0 e0       	ldi	r28, 0x00	; 0
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
                    }
                    else { AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,0x00,1,0);}
                }
            
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM2_PORT,MEM2_PIN,j);}
     8f2:	ae 01       	movw	r20, r28
     8f4:	66 e0       	ldi	r22, 0x06	; 6
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	85 e2       	ldi	r24, 0x25	; 37
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	d0 dd       	rcall	.-1120   	; 0x49e <AT45DB641E_write_page>
                        AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,0x00,1,SEQ_STOP);
                    }
                    else { AT45DB641E_write_buffer(&MEM2_PORT,MEM2_PIN,0x00,1,0);}
                }
            
    for(j=0;j<16;j++){
     8fe:	21 96       	adiw	r28, 0x01	; 1
     900:	c0 31       	cpi	r28, 0x10	; 16
     902:	d1 05       	cpc	r29, r1
     904:	b1 f7       	brne	.-20     	; 0x8f2 <DataflashManager_Erase+0x8a>
     906:	c0 e0       	ldi	r28, 0x00	; 0
     908:	d0 e0       	ldi	r29, 0x00	; 0
        AT45DB641E_write_page(&MEM2_PORT,MEM2_PIN,j);}
    //Memoire3
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
                    if (j==0){ AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,0x00,1,SEQ_START);}
     90a:	20 97       	sbiw	r28, 0x00	; 0
     90c:	11 f4       	brne	.+4      	; 0x912 <DataflashManager_Erase+0xaa>
     90e:	01 e0       	ldi	r16, 0x01	; 1
     910:	06 c0       	rjmp	.+12     	; 0x91e <DataflashManager_Erase+0xb6>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
     912:	cf 3f       	cpi	r28, 0xFF	; 255
     914:	d1 05       	cpc	r29, r1
     916:	11 f4       	brne	.+4      	; 0x91c <DataflashManager_Erase+0xb4>
                        AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,0x00,1,SEQ_STOP);
     918:	02 e0       	ldi	r16, 0x02	; 2
     91a:	01 c0       	rjmp	.+2      	; 0x91e <DataflashManager_Erase+0xb6>
                    }
                    else { AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,0x00,1,0);}
     91c:	00 e0       	ldi	r16, 0x00	; 0
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	65 e0       	ldi	r22, 0x05	; 5
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	85 e2       	ldi	r24, 0x25	; 37
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	69 dd       	rcall	.-1326   	; 0x402 <AT45DB641E_write_buffer>
                }
            
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM2_PORT,MEM2_PIN,j);}
    //Memoire3
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
     930:	21 96       	adiw	r28, 0x01	; 1
     932:	c1 15       	cp	r28, r1
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	d8 07       	cpc	r29, r24
     938:	41 f7       	brne	.-48     	; 0x90a <DataflashManager_Erase+0xa2>
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	d0 e0       	ldi	r29, 0x00	; 0
                    }
                    else { AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,0x00,1,0);}
                }
             
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM3_PORT,MEM3_PIN,j);}
     93e:	ae 01       	movw	r20, r28
     940:	65 e0       	ldi	r22, 0x05	; 5
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	85 e2       	ldi	r24, 0x25	; 37
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	aa dd       	rcall	.-1196   	; 0x49e <AT45DB641E_write_page>
                        AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,0x00,1,SEQ_STOP);
                    }
                    else { AT45DB641E_write_buffer(&MEM3_PORT,MEM3_PIN,0x00,1,0);}
                }
             
    for(j=0;j<16;j++){
     94a:	21 96       	adiw	r28, 0x01	; 1
     94c:	c0 31       	cpi	r28, 0x10	; 16
     94e:	d1 05       	cpc	r29, r1
     950:	b1 f7       	brne	.-20     	; 0x93e <DataflashManager_Erase+0xd6>
     952:	c0 e0       	ldi	r28, 0x00	; 0
     954:	d0 e0       	ldi	r29, 0x00	; 0
        AT45DB641E_write_page(&MEM3_PORT,MEM3_PIN,j);}
    //Memoire4
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
                    if (j==0){ AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,SEQ_START);}
     956:	20 97       	sbiw	r28, 0x00	; 0
     958:	11 f4       	brne	.+4      	; 0x95e <DataflashManager_Erase+0xf6>
     95a:	01 e0       	ldi	r16, 0x01	; 1
     95c:	06 c0       	rjmp	.+12     	; 0x96a <DataflashManager_Erase+0x102>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
     95e:	cf 3f       	cpi	r28, 0xFF	; 255
     960:	d1 05       	cpc	r29, r1
     962:	11 f4       	brne	.+4      	; 0x968 <DataflashManager_Erase+0x100>
                        AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,SEQ_STOP);
     964:	02 e0       	ldi	r16, 0x02	; 2
     966:	01 c0       	rjmp	.+2      	; 0x96a <DataflashManager_Erase+0x102>
                    }
                    else { AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,0);}
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	64 e0       	ldi	r22, 0x04	; 4
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	85 e2       	ldi	r24, 0x25	; 37
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	43 dd       	rcall	.-1402   	; 0x402 <AT45DB641E_write_buffer>
                }
             
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM3_PORT,MEM3_PIN,j);}
    //Memoire4
    for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE/2;j++){
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	c1 15       	cp	r28, r1
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	d8 07       	cpc	r29, r24
     984:	41 f7       	brne	.-48     	; 0x956 <DataflashManager_Erase+0xee>
     986:	c0 e0       	ldi	r28, 0x00	; 0
                        AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,SEQ_STOP);
                    }
                    else { AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,0);}
                }
    for(j=0;j<16;j++){
        AT45DB641E_write_page(&MEM4_PORT,MEM4_PIN,j);}
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	ae 01       	movw	r20, r28
     98c:	64 e0       	ldi	r22, 0x04	; 4
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	85 e2       	ldi	r24, 0x25	; 37
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	84 dd       	rcall	.-1272   	; 0x49e <AT45DB641E_write_page>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
                        AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,SEQ_STOP);
                    }
                    else { AT45DB641E_write_buffer(&MEM4_PORT,MEM4_PIN,0x00,1,0);}
                }
    for(j=0;j<16;j++){
     996:	21 96       	adiw	r28, 0x01	; 1
     998:	c0 31       	cpi	r28, 0x10	; 16
     99a:	d1 05       	cpc	r29, r1
     99c:	b1 f7       	brne	.-20     	; 0x98a <DataflashManager_Erase+0x122>
        AT45DB641E_write_page(&MEM4_PORT,MEM4_PIN,j);}
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	0f 91       	pop	r16
     9a4:	08 95       	ret

000009a6 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     9a6:	2f 92       	push	r2
     9a8:	3f 92       	push	r3
     9aa:	4f 92       	push	r4
     9ac:	5f 92       	push	r5
     9ae:	6f 92       	push	r6
     9b0:	7f 92       	push	r7
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	29 97       	sbiw	r28, 0x09	; 9
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	9b 83       	std	Y+3, r25	; 0x03
     9dc:	8a 83       	std	Y+2, r24	; 0x02
     9de:	6a 01       	movw	r12, r20
     9e0:	7b 01       	movw	r14, r22
     9e2:	3d 83       	std	Y+5, r19	; 0x05
     9e4:	2c 83       	std	Y+4, r18	; 0x04
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady()) return;
     9e6:	ab d4       	rcall	.+2390   	; 0x133e <Endpoint_WaitUntilReady>
     9e8:	81 11       	cpse	r24, r1
     9ea:	cb c0       	rjmp	.+406    	; 0xb82 <DataflashManager_ReadBlocks+0x1dc>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	c8 1a       	sub	r12, r24
     9f0:	d1 08       	sbc	r13, r1
     9f2:	e1 08       	sbc	r14, r1
     9f4:	f1 08       	sbc	r15, r1
     9f6:	61 2c       	mov	r6, r1
     9f8:	71 2c       	mov	r7, r1

	int i,j;
	for(i=0;i<TotalBlocks;i++){
     9fa:	ac 81       	ldd	r26, Y+4	; 0x04
     9fc:	bd 81       	ldd	r27, Y+5	; 0x05
     9fe:	6a 16       	cp	r6, r26
     a00:	7b 06       	cpc	r7, r27
     a02:	09 f4       	brne	.+2      	; 0xa06 <DataflashManager_ReadBlocks+0x60>
     a04:	b5 c0       	rjmp	.+362    	; 0xb70 <DataflashManager_ReadBlocks+0x1ca>
     a06:	16 01       	movw	r2, r12
     a08:	27 01       	movw	r4, r14
     a0a:	bf ef       	ldi	r27, 0xFF	; 255
     a0c:	2b 1a       	sub	r2, r27
     a0e:	3b 0a       	sbc	r3, r27
     a10:	4b 0a       	sbc	r4, r27
     a12:	5b 0a       	sbc	r5, r27
			else {
                // Memoire 3
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
                    if (j==0){ AT45DB641E_read_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2,&byte,1,SEQ_START);}
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2 -1){  AT45DB641E_read_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2,&byte,1,SEQ_STOP); }
                    else { AT45DB641E_read_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2,&byte,1,0);}
     a14:	f6 94       	lsr	r15
     a16:	e7 94       	ror	r14
     a18:	d7 94       	ror	r13
     a1a:	c7 94       	ror	r12
						if ((BlockAddress+i) % 2 == 0){
                // Memoire 1
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
                    if (j==0){ AT45DB641E_read_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2,&byte,1,SEQ_START);}
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
                        AT45DB641E_read_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2,&byte,1,SEQ_STOP); 
     a1c:	52 01       	movw	r10, r4
     a1e:	41 01       	movw	r8, r2
     a20:	b6 94       	lsr	r11
     a22:	a7 94       	ror	r10
     a24:	97 94       	ror	r9
     a26:	87 94       	ror	r8
     a28:	a1 2c       	mov	r10, r1
     a2a:	b1 2c       	mov	r11, r1
				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady()) return;
			}
			/* Retrieve byte in memory at address BlockAddress+i*VIRTUAL_MEMORY_BLOCK_SIZE+j */
			uint8_t byte;
						if ((BlockAddress+i) % 2 == 0){
     a2c:	d2 01       	movw	r26, r4
     a2e:	c1 01       	movw	r24, r2
     a30:	81 70       	andi	r24, 0x01	; 1
     a32:	99 27       	eor	r25, r25
     a34:	aa 27       	eor	r26, r26
     a36:	bb 27       	eor	r27, r27
     a38:	8e 83       	std	Y+6, r24	; 0x06
     a3a:	9f 83       	std	Y+7, r25	; 0x07
     a3c:	a8 87       	std	Y+8, r26	; 0x08
     a3e:	b9 87       	std	Y+9, r27	; 0x09
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	int i,j;
	for(i=0;i<TotalBlocks;i++){
		for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE;j++){
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     a44:	85 ff       	sbrs	r24, 5
     a46:	09 c0       	rjmp	.+18     	; 0xa5a <DataflashManager_ReadBlocks+0xb4>
				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady()) return;
			}
			/* Retrieve byte in memory at address BlockAddress+i*VIRTUAL_MEMORY_BLOCK_SIZE+j */
			uint8_t byte;
						if ((BlockAddress+i) % 2 == 0){
     a48:	8e 81       	ldd	r24, Y+6	; 0x06
     a4a:	9f 81       	ldd	r25, Y+7	; 0x07
     a4c:	a8 85       	ldd	r26, Y+8	; 0x08
     a4e:	b9 85       	ldd	r27, Y+9	; 0x09
     a50:	89 2b       	or	r24, r25
     a52:	8a 2b       	or	r24, r26
     a54:	8b 2b       	or	r24, r27
     a56:	51 f0       	breq	.+20     	; 0xa6c <DataflashManager_ReadBlocks+0xc6>
     a58:	3e c0       	rjmp	.+124    	; 0xad6 <DataflashManager_ReadBlocks+0x130>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a5e:	8e 77       	andi	r24, 0x7E	; 126
     a60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			if (!(Endpoint_IsReadWriteAllowed()))
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearIN();
				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady()) return;
     a64:	6c d4       	rcall	.+2264   	; 0x133e <Endpoint_WaitUntilReady>
     a66:	88 23       	and	r24, r24
     a68:	79 f3       	breq	.-34     	; 0xa48 <DataflashManager_ReadBlocks+0xa2>
     a6a:	8b c0       	rjmp	.+278    	; 0xb82 <DataflashManager_ReadBlocks+0x1dc>
			}
			/* Retrieve byte in memory at address BlockAddress+i*VIRTUAL_MEMORY_BLOCK_SIZE+j */
			uint8_t byte;
						if ((BlockAddress+i) % 2 == 0){
                // Memoire 1
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
     a6e:	a9 16       	cp	r10, r25
     a70:	b1 04       	cpc	r11, r1
     a72:	09 f0       	breq	.+2      	; 0xa76 <DataflashManager_ReadBlocks+0xd0>
     a74:	bc f4       	brge	.+46     	; 0xaa4 <DataflashManager_ReadBlocks+0xfe>
                    if (j==0){ AT45DB641E_read_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2,&byte,1,SEQ_START);}
     a76:	a1 14       	cp	r10, r1
     a78:	b1 04       	cpc	r11, r1
     a7a:	19 f4       	brne	.+6      	; 0xa82 <DataflashManager_ReadBlocks+0xdc>
     a7c:	ee 24       	eor	r14, r14
     a7e:	e3 94       	inc	r14
     a80:	08 c0       	rjmp	.+16     	; 0xa92 <DataflashManager_ReadBlocks+0xec>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2-1){  
     a82:	af ef       	ldi	r26, 0xFF	; 255
     a84:	aa 16       	cp	r10, r26
     a86:	b1 04       	cpc	r11, r1
     a88:	19 f4       	brne	.+6      	; 0xa90 <DataflashManager_ReadBlocks+0xea>
                        AT45DB641E_read_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2,&byte,1,SEQ_STOP); 
     a8a:	52 e0       	ldi	r21, 0x02	; 2
     a8c:	e5 2e       	mov	r14, r21
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <DataflashManager_ReadBlocks+0xec>
                    }
                    else { AT45DB641E_read_page(&MEM1_PORT,MEM1_PIN,(BlockAddress+i)/2,&byte,1,0);}
     a90:	e1 2c       	mov	r14, r1
     a92:	01 e0       	ldi	r16, 0x01	; 1
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	9e 01       	movw	r18, r28
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	a4 01       	movw	r20, r8
     a9e:	67 e0       	ldi	r22, 0x07	; 7
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	4d c0       	rjmp	.+154    	; 0xb3e <DataflashManager_ReadBlocks+0x198>
                }
                // Memoire 2 on commence a ecrire a 256
                else if (j < VIRTUAL_MEMORY_BLOCK_SIZE) {
                    if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2){ AT45DB641E_read_page(&MEM2_PORT,MEM2_PIN,(BlockAddress+i)/2,&byte,1,SEQ_START);}
     aa4:	a1 14       	cp	r10, r1
     aa6:	b1 e0       	ldi	r27, 0x01	; 1
     aa8:	bb 06       	cpc	r11, r27
     aaa:	19 f4       	brne	.+6      	; 0xab2 <DataflashManager_ReadBlocks+0x10c>
     aac:	ee 24       	eor	r14, r14
     aae:	e3 94       	inc	r14
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <DataflashManager_ReadBlocks+0x11e>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE-1){  
     ab2:	ef ef       	ldi	r30, 0xFF	; 255
     ab4:	ae 16       	cp	r10, r30
     ab6:	e1 e0       	ldi	r30, 0x01	; 1
     ab8:	be 06       	cpc	r11, r30
     aba:	19 f4       	brne	.+6      	; 0xac2 <DataflashManager_ReadBlocks+0x11c>
                        AT45DB641E_read_page(&MEM2_PORT,MEM2_PIN,(BlockAddress+i)/2,&byte,1,SEQ_STOP); 
     abc:	42 e0       	ldi	r20, 0x02	; 2
     abe:	e4 2e       	mov	r14, r20
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <DataflashManager_ReadBlocks+0x11e>
                        
                    }
                    else { AT45DB641E_read_page(&MEM2_PORT,MEM2_PIN,(BlockAddress+i)/2,&byte,1,0);}
     ac2:	e1 2c       	mov	r14, r1
     ac4:	01 e0       	ldi	r16, 0x01	; 1
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	9e 01       	movw	r18, r28
     aca:	2f 5f       	subi	r18, 0xFF	; 255
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	a4 01       	movw	r20, r8
     ad0:	66 e0       	ldi	r22, 0x06	; 6
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	34 c0       	rjmp	.+104    	; 0xb3e <DataflashManager_ReadBlocks+0x198>
                }
            }
			else {
                // Memoire 3
                if(VIRTUAL_MEMORY_BLOCK_SIZE/2 > j ){
     ad6:	ff ef       	ldi	r31, 0xFF	; 255
     ad8:	af 16       	cp	r10, r31
     ada:	b1 04       	cpc	r11, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <DataflashManager_ReadBlocks+0x13a>
     ade:	bc f4       	brge	.+46     	; 0xb0e <DataflashManager_ReadBlocks+0x168>
                    if (j==0){ AT45DB641E_read_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2,&byte,1,SEQ_START);}
     ae0:	a1 14       	cp	r10, r1
     ae2:	b1 04       	cpc	r11, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <DataflashManager_ReadBlocks+0x146>
     ae6:	ee 24       	eor	r14, r14
     ae8:	e3 94       	inc	r14
     aea:	08 c0       	rjmp	.+16     	; 0xafc <DataflashManager_ReadBlocks+0x156>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2 -1){  AT45DB641E_read_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2,&byte,1,SEQ_STOP); }
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	a8 16       	cp	r10, r24
     af0:	b1 04       	cpc	r11, r1
     af2:	19 f4       	brne	.+6      	; 0xafa <DataflashManager_ReadBlocks+0x154>
     af4:	32 e0       	ldi	r19, 0x02	; 2
     af6:	e3 2e       	mov	r14, r19
     af8:	01 c0       	rjmp	.+2      	; 0xafc <DataflashManager_ReadBlocks+0x156>
                    else { AT45DB641E_read_page(&MEM3_PORT,MEM3_PIN,(BlockAddress+i-1)/2,&byte,1,0);}
     afa:	e1 2c       	mov	r14, r1
     afc:	01 e0       	ldi	r16, 0x01	; 1
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	9e 01       	movw	r18, r28
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	a6 01       	movw	r20, r12
     b08:	65 e0       	ldi	r22, 0x05	; 5
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	18 c0       	rjmp	.+48     	; 0xb3e <DataflashManager_ReadBlocks+0x198>
                }
                // Memoire 4 on commence a ecrire a 256
                else if (j < VIRTUAL_MEMORY_BLOCK_SIZE) {
                    if (j==VIRTUAL_MEMORY_BLOCK_SIZE/2){ AT45DB641E_read_page(&MEM4_PORT,MEM4_PIN,(BlockAddress+i-1)/2,&byte,1,SEQ_START); }
     b0e:	a1 14       	cp	r10, r1
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	b9 06       	cpc	r11, r25
     b14:	19 f4       	brne	.+6      	; 0xb1c <DataflashManager_ReadBlocks+0x176>
     b16:	ee 24       	eor	r14, r14
     b18:	e3 94       	inc	r14
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <DataflashManager_ReadBlocks+0x188>
                    else if (j==VIRTUAL_MEMORY_BLOCK_SIZE-1){  AT45DB641E_read_page(&MEM4_PORT,MEM4_PIN,(BlockAddress+i-1)/2,&byte,1,SEQ_STOP); }
     b1c:	af ef       	ldi	r26, 0xFF	; 255
     b1e:	aa 16       	cp	r10, r26
     b20:	a1 e0       	ldi	r26, 0x01	; 1
     b22:	ba 06       	cpc	r11, r26
     b24:	19 f4       	brne	.+6      	; 0xb2c <DataflashManager_ReadBlocks+0x186>
     b26:	22 e0       	ldi	r18, 0x02	; 2
     b28:	e2 2e       	mov	r14, r18
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <DataflashManager_ReadBlocks+0x188>
                    else { AT45DB641E_read_page(&MEM4_PORT,MEM4_PIN,(BlockAddress+i-1)/2,&byte,1,0); }
     b2c:	e1 2c       	mov	r14, r1
     b2e:	01 e0       	ldi	r16, 0x01	; 1
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	9e 01       	movw	r18, r28
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	a6 01       	movw	r20, r12
     b3a:	64 e0       	ldi	r22, 0x04	; 4
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	85 e2       	ldi	r24, 0x25	; 37
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	e2 dc       	rcall	.-1596   	; 0x508 <AT45DB641E_read_page>
                }
            }
			/* Send byte to USB host */
			Endpoint_Write_8(byte);
     b44:	89 81       	ldd	r24, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b46:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			if (MSInterfaceInfo->State.IsMassStoreReset) return;
     b4a:	ea 81       	ldd	r30, Y+2	; 0x02
     b4c:	fb 81       	ldd	r31, Y+3	; 0x03
     b4e:	80 ad       	ldd	r24, Z+56	; 0x38
     b50:	81 11       	cpse	r24, r1
     b52:	17 c0       	rjmp	.+46     	; 0xb82 <DataflashManager_ReadBlocks+0x1dc>
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady()) return;

	int i,j;
	for(i=0;i<TotalBlocks;i++){
		for(j=0;j<VIRTUAL_MEMORY_BLOCK_SIZE;j++){
     b54:	ff ef       	ldi	r31, 0xFF	; 255
     b56:	af 1a       	sub	r10, r31
     b58:	bf 0a       	sbc	r11, r31
     b5a:	a1 14       	cp	r10, r1
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	b8 06       	cpc	r11, r24
     b60:	09 f0       	breq	.+2      	; 0xb64 <DataflashManager_ReadBlocks+0x1be>
     b62:	6e cf       	rjmp	.-292    	; 0xa40 <DataflashManager_ReadBlocks+0x9a>
{
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady()) return;

	int i,j;
	for(i=0;i<TotalBlocks;i++){
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	69 1a       	sub	r6, r25
     b68:	79 0a       	sbc	r7, r25
     b6a:	72 01       	movw	r14, r4
     b6c:	61 01       	movw	r12, r2
     b6e:	45 cf       	rjmp	.-374    	; 0x9fa <DataflashManager_ReadBlocks+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			Endpoint_Write_8(byte);
			if (MSInterfaceInfo->State.IsMassStoreReset) return;
		}
	}
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed())) Endpoint_ClearIN();
     b74:	85 fd       	sbrc	r24, 5
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <DataflashManager_ReadBlocks+0x1dc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b7c:	8e 77       	andi	r24, 0x7E	; 126
     b7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
}
     b82:	29 96       	adiw	r28, 0x09	; 9
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	3f 90       	pop	r3
     bb0:	2f 90       	pop	r2
     bb2:	08 95       	ret

00000bb4 <DataflashManager_ResetDataflashProtections>:

/** Disables the Dataflash memory write protection bits on the board Dataflash ICs, if enabled. */
void DataflashManager_ResetDataflashProtections(void)
{
     bb4:	08 95       	ret

00000bb6 <DataflashManager_CheckDataflashOperation>:
 *  \return Boolean \c true if all media chips are working, \c false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
{
	return true;
}
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	08 95       	ret

00000bba <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
     bc4:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     bc6:	48 a1       	ldd	r20, Y+32	; 0x20
     bc8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     bca:	6e 8d       	ldd	r22, Y+30	; 0x1e
     bcc:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     bce:	0b a1       	ldd	r16, Y+35	; 0x23
     bd0:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     bd2:	41 15       	cp	r20, r1
     bd4:	51 05       	cpc	r21, r1
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	62 07       	cpc	r22, r18
     bda:	71 05       	cpc	r23, r1
     bdc:	68 f0       	brcs	.+26     	; 0xbf8 <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bde:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SenseData+0x2>
     be2:	80 7f       	andi	r24, 0xF0	; 240
     be4:	85 60       	ori	r24, 0x05	; 5
     be6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <SenseData+0x2>
     bea:	81 e2       	ldi	r24, 0x21	; 33
     bec:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SenseData+0xc>
     bf0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	21 c0       	rjmp	.+66     	; 0xc3a <SCSI_Command_ReadWrite_10+0x80>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     bf8:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     bfa:	88 23       	and	r24, r24
     bfc:	19 f0       	breq	.+6      	; 0xc04 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     bfe:	ce 01       	movw	r24, r28
     c00:	d2 de       	rcall	.-604    	; 0x9a6 <DataflashManager_ReadBlocks>
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <SCSI_Command_ReadWrite_10+0x4e>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     c04:	ce 01       	movw	r24, r28
     c06:	00 dd       	rcall	.-1536   	; 0x608 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     c08:	c8 01       	movw	r24, r16
     c0a:	a0 e0       	ldi	r26, 0x00	; 0
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	29 e0       	ldi	r18, 0x09	; 9
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	aa 1f       	adc	r26, r26
     c16:	bb 1f       	adc	r27, r27
     c18:	2a 95       	dec	r18
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <SCSI_Command_ReadWrite_10+0x56>
     c1c:	4c 89       	ldd	r20, Y+20	; 0x14
     c1e:	5d 89       	ldd	r21, Y+21	; 0x15
     c20:	6e 89       	ldd	r22, Y+22	; 0x16
     c22:	7f 89       	ldd	r23, Y+23	; 0x17
     c24:	8a 01       	movw	r16, r20
     c26:	9b 01       	movw	r18, r22
     c28:	08 1b       	sub	r16, r24
     c2a:	19 0b       	sbc	r17, r25
     c2c:	2a 0b       	sbc	r18, r26
     c2e:	3b 0b       	sbc	r19, r27
     c30:	0c 8b       	std	Y+20, r16	; 0x14
     c32:	1d 8b       	std	Y+21, r17	; 0x15
     c34:	2e 8b       	std	Y+22, r18	; 0x16
     c36:	3f 8b       	std	Y+23, r19	; 0x17

	return true;
     c38:	81 e0       	ldi	r24, 0x01	; 1
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	28 97       	sbiw	r28, 0x08	; 8
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     c66:	fc 01       	movw	r30, r24
     c68:	83 8d       	ldd	r24, Z+27	; 0x1b
     c6a:	8d 31       	cpi	r24, 0x1D	; 29
     c6c:	09 f4       	brne	.+2      	; 0xc70 <SCSI_DecodeSCSICommand+0x2c>
     c6e:	aa c0       	rjmp	.+340    	; 0xdc4 <SCSI_DecodeSCSICommand+0x180>
     c70:	90 f4       	brcc	.+36     	; 0xc96 <SCSI_DecodeSCSICommand+0x52>
     c72:	82 31       	cpi	r24, 0x12	; 18
     c74:	09 f4       	brne	.+2      	; 0xc78 <SCSI_DecodeSCSICommand+0x34>
     c76:	4c c0       	rjmp	.+152    	; 0xd10 <SCSI_DecodeSCSICommand+0xcc>
     c78:	38 f4       	brcc	.+14     	; 0xc88 <SCSI_DecodeSCSICommand+0x44>
     c7a:	88 23       	and	r24, r24
     c7c:	09 f4       	brne	.+2      	; 0xc80 <SCSI_DecodeSCSICommand+0x3c>
     c7e:	d6 c0       	rjmp	.+428    	; 0xe2c <SCSI_DecodeSCSICommand+0x1e8>
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	09 f4       	brne	.+2      	; 0xc86 <SCSI_DecodeSCSICommand+0x42>
     c84:	79 c0       	rjmp	.+242    	; 0xd78 <SCSI_DecodeSCSICommand+0x134>
     c86:	d8 c0       	rjmp	.+432    	; 0xe38 <SCSI_DecodeSCSICommand+0x1f4>
     c88:	8a 31       	cpi	r24, 0x1A	; 26
     c8a:	09 f4       	brne	.+2      	; 0xc8e <SCSI_DecodeSCSICommand+0x4a>
     c8c:	b5 c0       	rjmp	.+362    	; 0xdf8 <SCSI_DecodeSCSICommand+0x1b4>
     c8e:	8b 31       	cpi	r24, 0x1B	; 27
     c90:	09 f4       	brne	.+2      	; 0xc94 <SCSI_DecodeSCSICommand+0x50>
     c92:	cc c0       	rjmp	.+408    	; 0xe2c <SCSI_DecodeSCSICommand+0x1e8>
     c94:	d1 c0       	rjmp	.+418    	; 0xe38 <SCSI_DecodeSCSICommand+0x1f4>
     c96:	88 32       	cpi	r24, 0x28	; 40
     c98:	09 f4       	brne	.+2      	; 0xc9c <SCSI_DecodeSCSICommand+0x58>
     c9a:	a8 c0       	rjmp	.+336    	; 0xdec <SCSI_DecodeSCSICommand+0x1a8>
     c9c:	90 f5       	brcc	.+100    	; 0xd02 <SCSI_DecodeSCSICommand+0xbe>
     c9e:	8e 31       	cpi	r24, 0x1E	; 30
     ca0:	09 f4       	brne	.+2      	; 0xca4 <SCSI_DecodeSCSICommand+0x60>
     ca2:	c4 c0       	rjmp	.+392    	; 0xe2c <SCSI_DecodeSCSICommand+0x1e8>
     ca4:	85 32       	cpi	r24, 0x25	; 37
     ca6:	09 f0       	breq	.+2      	; 0xcaa <SCSI_DecodeSCSICommand+0x66>
     ca8:	c7 c0       	rjmp	.+398    	; 0xe38 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	a0 e0       	ldi	r26, 0x00	; 0
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	af 83       	std	Y+7, r26	; 0x07
     cb8:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	ab 83       	std	Y+3, r26	; 0x03
     cc8:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	64 e0       	ldi	r22, 0x04	; 4
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	ce 01       	movw	r24, r28
     cd4:	05 96       	adiw	r24, 0x05	; 5
     cd6:	52 d1       	rcall	.+676    	; 0xf7c <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	64 e0       	ldi	r22, 0x04	; 4
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	4b d1       	rcall	.+662    	; 0xf7c <Endpoint_Write_Stream_BE>
     ce6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     cea:	8e 77       	andi	r24, 0x7E	; 126
     cec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     cf0:	f8 01       	movw	r30, r16
     cf2:	84 89       	ldd	r24, Z+20	; 0x14
     cf4:	95 89       	ldd	r25, Z+21	; 0x15
     cf6:	a6 89       	ldd	r26, Z+22	; 0x16
     cf8:	b7 89       	ldd	r27, Z+23	; 0x17
     cfa:	08 97       	sbiw	r24, 0x08	; 8
     cfc:	a1 09       	sbc	r26, r1
     cfe:	b1 09       	sbc	r27, r1
     d00:	90 c0       	rjmp	.+288    	; 0xe22 <SCSI_DecodeSCSICommand+0x1de>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     d02:	8a 32       	cpi	r24, 0x2A	; 42
     d04:	09 f4       	brne	.+2      	; 0xd08 <SCSI_DecodeSCSICommand+0xc4>
     d06:	70 c0       	rjmp	.+224    	; 0xde8 <SCSI_DecodeSCSICommand+0x1a4>
     d08:	8f 32       	cpi	r24, 0x2F	; 47
     d0a:	09 f4       	brne	.+2      	; 0xd0e <SCSI_DecodeSCSICommand+0xca>
     d0c:	8f c0       	rjmp	.+286    	; 0xe2c <SCSI_DecodeSCSICommand+0x1e8>
     d0e:	94 c0       	rjmp	.+296    	; 0xe38 <SCSI_DecodeSCSICommand+0x1f4>
     d10:	f8 01       	movw	r30, r16
     d12:	e7 8c       	ldd	r14, Z+31	; 0x1f
     d14:	f6 8c       	ldd	r15, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     d16:	84 8d       	ldd	r24, Z+28	; 0x1c
     d18:	83 70       	andi	r24, 0x03	; 3
     d1a:	19 f4       	brne	.+6      	; 0xd22 <SCSI_DecodeSCSICommand+0xde>
     d1c:	85 8d       	ldd	r24, Z+29	; 0x1d
     d1e:	88 23       	and	r24, r24
     d20:	41 f0       	breq	.+16     	; 0xd32 <SCSI_DecodeSCSICommand+0xee>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d22:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SenseData+0x2>
     d26:	80 7f       	andi	r24, 0xF0	; 240
     d28:	85 60       	ori	r24, 0x05	; 5
     d2a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <SenseData+0x2>
     d2e:	84 e2       	ldi	r24, 0x24	; 36
     d30:	8a c0       	rjmp	.+276    	; 0xe46 <SCSI_DecodeSCSICommand+0x202>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     d32:	67 01       	movw	r12, r14
     d34:	f5 e2       	ldi	r31, 0x25	; 37
     d36:	ef 16       	cp	r14, r31
     d38:	f1 04       	cpc	r15, r1
     d3a:	18 f0       	brcs	.+6      	; 0xd42 <SCSI_DecodeSCSICommand+0xfe>
     d3c:	94 e2       	ldi	r25, 0x24	; 36
     d3e:	c9 2e       	mov	r12, r25
     d40:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	b6 01       	movw	r22, r12
     d48:	8f e4       	ldi	r24, 0x4F	; 79
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	ce d0       	rcall	.+412    	; 0xeea <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	c7 01       	movw	r24, r14
     d54:	8c 19       	sub	r24, r12
     d56:	9d 09       	sbc	r25, r13
     d58:	94 d0       	rcall	.+296    	; 0xe82 <Endpoint_Null_Stream>
     d5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d5e:	8e 77       	andi	r24, 0x7E	; 126
     d60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     d64:	f8 01       	movw	r30, r16
     d66:	84 89       	ldd	r24, Z+20	; 0x14
     d68:	95 89       	ldd	r25, Z+21	; 0x15
     d6a:	a6 89       	ldd	r26, Z+22	; 0x16
     d6c:	b7 89       	ldd	r27, Z+23	; 0x17
     d6e:	8c 19       	sub	r24, r12
     d70:	9d 09       	sbc	r25, r13
     d72:	a1 09       	sbc	r26, r1
     d74:	b1 09       	sbc	r27, r1
     d76:	55 c0       	rjmp	.+170    	; 0xe22 <SCSI_DecodeSCSICommand+0x1de>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     d78:	f8 01       	movw	r30, r16
     d7a:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     d7c:	ef 2c       	mov	r14, r15
     d7e:	f2 e1       	ldi	r31, 0x12	; 18
     d80:	ff 15       	cp	r31, r15
     d82:	10 f4       	brcc	.+4      	; 0xd88 <SCSI_DecodeSCSICommand+0x144>
     d84:	82 e1       	ldi	r24, 0x12	; 18
     d86:	e8 2e       	mov	r14, r24

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     d88:	ce 2c       	mov	r12, r14
     d8a:	d1 2c       	mov	r13, r1
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	b6 01       	movw	r22, r12
     d92:	8d e3       	ldi	r24, 0x3D	; 61
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	a9 d0       	rcall	.+338    	; 0xeea <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     d98:	8f 2d       	mov	r24, r15
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	8c 19       	sub	r24, r12
     da2:	9d 09       	sbc	r25, r13
     da4:	6e d0       	rcall	.+220    	; 0xe82 <Endpoint_Null_Stream>
     da6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     daa:	8e 77       	andi	r24, 0x7E	; 126
     dac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     db0:	f8 01       	movw	r30, r16
     db2:	84 89       	ldd	r24, Z+20	; 0x14
     db4:	95 89       	ldd	r25, Z+21	; 0x15
     db6:	a6 89       	ldd	r26, Z+22	; 0x16
     db8:	b7 89       	ldd	r27, Z+23	; 0x17
     dba:	8e 19       	sub	r24, r14
     dbc:	91 09       	sbc	r25, r1
     dbe:	a1 09       	sbc	r26, r1
     dc0:	b1 09       	sbc	r27, r1
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     dc2:	2f c0       	rjmp	.+94     	; 0xe22 <SCSI_DecodeSCSICommand+0x1de>
     dc4:	f8 01       	movw	r30, r16
     dc6:	84 8d       	ldd	r24, Z+28	; 0x1c
     dc8:	82 ff       	sbrs	r24, 2

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     dca:	ab cf       	rjmp	.-170    	; 0xd22 <SCSI_DecodeSCSICommand+0xde>
     dcc:	f4 de       	rcall	.-536    	; 0xbb6 <DataflashManager_CheckDataflashOperation>
     dce:	81 11       	cpse	r24, r1
     dd0:	2d c0       	rjmp	.+90     	; 0xe2c <SCSI_DecodeSCSICommand+0x1e8>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     dd2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SenseData+0x2>
     dd6:	80 7f       	andi	r24, 0xF0	; 240
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <SenseData+0x2>
     dde:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <SenseData+0xc>
     de2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SenseData+0xd>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     de6:	3d c0       	rjmp	.+122    	; 0xe62 <SCSI_DecodeSCSICommand+0x21e>
     de8:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     dea:	01 c0       	rjmp	.+2      	; 0xdee <SCSI_DecodeSCSICommand+0x1aa>
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	c8 01       	movw	r24, r16
     df0:	e4 de       	rcall	.-568    	; 0xbba <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     df2:	81 11       	cpse	r24, r1
     df4:	2b c0       	rjmp	.+86     	; 0xe4c <SCSI_DecodeSCSICommand+0x208>
     df6:	35 c0       	rjmp	.+106    	; 0xe62 <SCSI_DecodeSCSICommand+0x21e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     df8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     dfc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     e00:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     e04:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e0c:	8e 77       	andi	r24, 0x7E	; 126
     e0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     e12:	f8 01       	movw	r30, r16
     e14:	84 89       	ldd	r24, Z+20	; 0x14
     e16:	95 89       	ldd	r25, Z+21	; 0x15
     e18:	a6 89       	ldd	r26, Z+22	; 0x16
     e1a:	b7 89       	ldd	r27, Z+23	; 0x17
     e1c:	04 97       	sbiw	r24, 0x04	; 4
     e1e:	a1 09       	sbc	r26, r1
     e20:	b1 09       	sbc	r27, r1
     e22:	84 8b       	std	Z+20, r24	; 0x14
     e24:	95 8b       	std	Z+21, r25	; 0x15
     e26:	a6 8b       	std	Z+22, r26	; 0x16
     e28:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     e2a:	10 c0       	rjmp	.+32     	; 0xe4c <SCSI_DecodeSCSICommand+0x208>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     e2c:	f8 01       	movw	r30, r16
     e2e:	14 8a       	std	Z+20, r1	; 0x14
     e30:	15 8a       	std	Z+21, r1	; 0x15
     e32:	16 8a       	std	Z+22, r1	; 0x16
     e34:	17 8a       	std	Z+23, r1	; 0x17
			break;
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <SCSI_DecodeSCSICommand+0x208>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     e38:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SenseData+0x2>
     e3c:	80 7f       	andi	r24, 0xF0	; 240
     e3e:	85 60       	ori	r24, 0x05	; 5
     e40:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <SenseData+0x2>
     e44:	80 e2       	ldi	r24, 0x20	; 32
     e46:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SenseData+0xc>
     e4a:	cb cf       	rjmp	.-106    	; 0xde2 <SCSI_DecodeSCSICommand+0x19e>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     e4c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SenseData+0x2>
     e50:	80 7f       	andi	r24, 0xF0	; 240
     e52:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <SenseData+0x2>
     e56:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <SenseData+0xc>
     e5a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <SCSI_DecodeSCSICommand+0x220>
	}

	return false;
     e62:	80 e0       	ldi	r24, 0x00	; 0
}
     e64:	28 96       	adiw	r28, 0x08	; 8
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	08 95       	ret

00000e82 <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	7c 01       	movw	r14, r24
     e90:	8b 01       	movw	r16, r22
     e92:	61 15       	cp	r22, r1
     e94:	71 05       	cpc	r23, r1
     e96:	21 f0       	breq	.+8      	; 0xea0 <Endpoint_Null_Stream+0x1e>
     e98:	fb 01       	movw	r30, r22
     e9a:	c0 81       	ld	r28, Z
     e9c:	d1 81       	ldd	r29, Z+1	; 0x01
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <Endpoint_Null_Stream+0x22>
     ea0:	c0 e0       	ldi	r28, 0x00	; 0
     ea2:	d0 e0       	ldi	r29, 0x00	; 0
     ea4:	4c d2       	rcall	.+1176   	; 0x133e <Endpoint_WaitUntilReady>
     ea6:	81 11       	cpse	r24, r1
     ea8:	19 c0       	rjmp	.+50     	; 0xedc <Endpoint_Null_Stream+0x5a>
     eaa:	ce 15       	cp	r28, r14
     eac:	df 05       	cpc	r29, r15
     eae:	a8 f4       	brcc	.+42     	; 0xeda <Endpoint_Null_Stream+0x58>
     eb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     eb4:	85 fd       	sbrc	r24, 5
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <Endpoint_Null_Stream+0x50>
     eb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ebc:	8e 77       	andi	r24, 0x7E	; 126
     ebe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     ec2:	01 15       	cp	r16, r1
     ec4:	11 05       	cpc	r17, r1
     ec6:	71 f3       	breq	.-36     	; 0xea4 <Endpoint_Null_Stream+0x22>
     ec8:	f8 01       	movw	r30, r16
     eca:	d1 83       	std	Z+1, r29	; 0x01
     ecc:	c0 83       	st	Z, r28
     ece:	85 e0       	ldi	r24, 0x05	; 5
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <Endpoint_Null_Stream+0x5a>
     ed2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     ed6:	21 96       	adiw	r28, 0x01	; 1
     ed8:	e8 cf       	rjmp	.-48     	; 0xeaa <Endpoint_Null_Stream+0x28>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	08 95       	ret

00000eea <Endpoint_Write_Stream_LE>:
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
     efc:	8b 01       	movw	r16, r22
     efe:	7a 01       	movw	r14, r20
     f00:	1e d2       	rcall	.+1084   	; 0x133e <Endpoint_WaitUntilReady>
     f02:	81 11       	cpse	r24, r1
     f04:	32 c0       	rjmp	.+100    	; 0xf6a <Endpoint_Write_Stream_LE+0x80>
     f06:	e1 14       	cp	r14, r1
     f08:	f1 04       	cpc	r15, r1
     f0a:	39 f0       	breq	.+14     	; 0xf1a <Endpoint_Write_Stream_LE+0x30>
     f0c:	f7 01       	movw	r30, r14
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	08 1b       	sub	r16, r24
     f14:	19 0b       	sbc	r17, r25
     f16:	c8 0f       	add	r28, r24
     f18:	d9 1f       	adc	r29, r25
     f1a:	c1 2c       	mov	r12, r1
     f1c:	d1 2c       	mov	r13, r1
     f1e:	01 15       	cp	r16, r1
     f20:	11 05       	cpc	r17, r1
     f22:	11 f1       	breq	.+68     	; 0xf68 <Endpoint_Write_Stream_LE+0x7e>
     f24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f28:	85 fd       	sbrc	r24, 5
     f2a:	15 c0       	rjmp	.+42     	; 0xf56 <Endpoint_Write_Stream_LE+0x6c>
     f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f30:	8e 77       	andi	r24, 0x7E	; 126
     f32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f36:	e1 14       	cp	r14, r1
     f38:	f1 04       	cpc	r15, r1
     f3a:	49 f0       	breq	.+18     	; 0xf4e <Endpoint_Write_Stream_LE+0x64>
     f3c:	f7 01       	movw	r30, r14
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	c8 0e       	add	r12, r24
     f44:	d9 1e       	adc	r13, r25
     f46:	d1 82       	std	Z+1, r13	; 0x01
     f48:	c0 82       	st	Z, r12
     f4a:	85 e0       	ldi	r24, 0x05	; 5
     f4c:	0e c0       	rjmp	.+28     	; 0xf6a <Endpoint_Write_Stream_LE+0x80>
     f4e:	f7 d1       	rcall	.+1006   	; 0x133e <Endpoint_WaitUntilReady>
     f50:	88 23       	and	r24, r24
     f52:	29 f3       	breq	.-54     	; 0xf1e <Endpoint_Write_Stream_LE+0x34>
     f54:	0a c0       	rjmp	.+20     	; 0xf6a <Endpoint_Write_Stream_LE+0x80>
     f56:	89 91       	ld	r24, Y+
     f58:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     f5c:	01 50       	subi	r16, 0x01	; 1
     f5e:	11 09       	sbc	r17, r1
     f60:	ff ef       	ldi	r31, 0xFF	; 255
     f62:	cf 1a       	sub	r12, r31
     f64:	df 0a       	sbc	r13, r31
     f66:	db cf       	rjmp	.-74     	; 0xf1e <Endpoint_Write_Stream_LE+0x34>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <Endpoint_Write_Stream_BE>:
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
     f8e:	8b 01       	movw	r16, r22
     f90:	7a 01       	movw	r14, r20
     f92:	d5 d1       	rcall	.+938    	; 0x133e <Endpoint_WaitUntilReady>
     f94:	81 11       	cpse	r24, r1
     f96:	37 c0       	rjmp	.+110    	; 0x1006 <Endpoint_Write_Stream_BE+0x8a>
     f98:	c8 01       	movw	r24, r16
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	c8 0f       	add	r28, r24
     f9e:	d9 1f       	adc	r29, r25
     fa0:	e1 14       	cp	r14, r1
     fa2:	f1 04       	cpc	r15, r1
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <Endpoint_Write_Stream_BE+0x38>
     fa6:	f7 01       	movw	r30, r14
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	08 1b       	sub	r16, r24
     fae:	19 0b       	sbc	r17, r25
     fb0:	c8 1b       	sub	r28, r24
     fb2:	d9 0b       	sbc	r29, r25
     fb4:	c1 2c       	mov	r12, r1
     fb6:	d1 2c       	mov	r13, r1
     fb8:	01 15       	cp	r16, r1
     fba:	11 05       	cpc	r17, r1
     fbc:	19 f1       	breq	.+70     	; 0x1004 <Endpoint_Write_Stream_BE+0x88>
     fbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fc2:	85 fd       	sbrc	r24, 5
     fc4:	15 c0       	rjmp	.+42     	; 0xff0 <Endpoint_Write_Stream_BE+0x74>
     fc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fca:	8e 77       	andi	r24, 0x7E	; 126
     fcc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     fd0:	e1 14       	cp	r14, r1
     fd2:	f1 04       	cpc	r15, r1
     fd4:	49 f0       	breq	.+18     	; 0xfe8 <Endpoint_Write_Stream_BE+0x6c>
     fd6:	f7 01       	movw	r30, r14
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	c8 0e       	add	r12, r24
     fde:	d9 1e       	adc	r13, r25
     fe0:	d1 82       	std	Z+1, r13	; 0x01
     fe2:	c0 82       	st	Z, r12
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <Endpoint_Write_Stream_BE+0x8a>
     fe8:	aa d1       	rcall	.+852    	; 0x133e <Endpoint_WaitUntilReady>
     fea:	88 23       	and	r24, r24
     fec:	29 f3       	breq	.-54     	; 0xfb8 <Endpoint_Write_Stream_BE+0x3c>
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <Endpoint_Write_Stream_BE+0x8a>
     ff0:	88 81       	ld	r24, Y
     ff2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     ff6:	21 97       	sbiw	r28, 0x01	; 1
     ff8:	01 50       	subi	r16, 0x01	; 1
     ffa:	11 09       	sbc	r17, r1
     ffc:	ff ef       	ldi	r31, 0xFF	; 255
     ffe:	cf 1a       	sub	r12, r31
    1000:	df 0a       	sbc	r13, r31
    1002:	da cf       	rjmp	.-76     	; 0xfb8 <Endpoint_Write_Stream_BE+0x3c>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	08 95       	ret

00001018 <Endpoint_Read_Stream_LE>:
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
    102a:	8b 01       	movw	r16, r22
    102c:	7a 01       	movw	r14, r20
    102e:	87 d1       	rcall	.+782    	; 0x133e <Endpoint_WaitUntilReady>
    1030:	81 11       	cpse	r24, r1
    1032:	32 c0       	rjmp	.+100    	; 0x1098 <Endpoint_Read_Stream_LE+0x80>
    1034:	e1 14       	cp	r14, r1
    1036:	f1 04       	cpc	r15, r1
    1038:	39 f0       	breq	.+14     	; 0x1048 <Endpoint_Read_Stream_LE+0x30>
    103a:	f7 01       	movw	r30, r14
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	08 1b       	sub	r16, r24
    1042:	19 0b       	sbc	r17, r25
    1044:	c8 0f       	add	r28, r24
    1046:	d9 1f       	adc	r29, r25
    1048:	c1 2c       	mov	r12, r1
    104a:	d1 2c       	mov	r13, r1
    104c:	01 15       	cp	r16, r1
    104e:	11 05       	cpc	r17, r1
    1050:	11 f1       	breq	.+68     	; 0x1096 <Endpoint_Read_Stream_LE+0x7e>
    1052:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1056:	85 fd       	sbrc	r24, 5
    1058:	15 c0       	rjmp	.+42     	; 0x1084 <Endpoint_Read_Stream_LE+0x6c>
    105a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    105e:	8b 77       	andi	r24, 0x7B	; 123
    1060:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1064:	e1 14       	cp	r14, r1
    1066:	f1 04       	cpc	r15, r1
    1068:	49 f0       	breq	.+18     	; 0x107c <Endpoint_Read_Stream_LE+0x64>
    106a:	f7 01       	movw	r30, r14
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	c8 0e       	add	r12, r24
    1072:	d9 1e       	adc	r13, r25
    1074:	d1 82       	std	Z+1, r13	; 0x01
    1076:	c0 82       	st	Z, r12
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	0e c0       	rjmp	.+28     	; 0x1098 <Endpoint_Read_Stream_LE+0x80>
    107c:	60 d1       	rcall	.+704    	; 0x133e <Endpoint_WaitUntilReady>
    107e:	88 23       	and	r24, r24
    1080:	29 f3       	breq	.-54     	; 0x104c <Endpoint_Read_Stream_LE+0x34>
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <Endpoint_Read_Stream_LE+0x80>
    1084:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1088:	89 93       	st	Y+, r24
    108a:	01 50       	subi	r16, 0x01	; 1
    108c:	11 09       	sbc	r17, r1
    108e:	ff ef       	ldi	r31, 0xFF	; 255
    1090:	cf 1a       	sub	r12, r31
    1092:	df 0a       	sbc	r13, r31
    1094:	db cf       	rjmp	.-74     	; 0x104c <Endpoint_Read_Stream_LE+0x34>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	08 95       	ret

000010aa <Endpoint_Write_Control_Stream_LE>:
    10aa:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <USB_ControlRequest+0x6>
    10ae:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <USB_ControlRequest+0x7>
    10b2:	26 17       	cp	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	48 f0       	brcs	.+18     	; 0x10ca <Endpoint_Write_Control_Stream_LE+0x20>
    10b8:	61 15       	cp	r22, r1
    10ba:	71 05       	cpc	r23, r1
    10bc:	39 f4       	brne	.+14     	; 0x10cc <Endpoint_Write_Control_Stream_LE+0x22>
    10be:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10c2:	2e 77       	andi	r18, 0x7E	; 126
    10c4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <Endpoint_Write_Control_Stream_LE+0x22>
    10ca:	b9 01       	movw	r22, r18
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	61 15       	cp	r22, r1
    10d2:	71 05       	cpc	r23, r1
    10d4:	61 f1       	breq	.+88     	; 0x112e <Endpoint_Write_Control_Stream_LE+0x84>
    10d6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
    10da:	88 23       	and	r24, r24
    10dc:	d9 f1       	breq	.+118    	; 0x1154 <Endpoint_Write_Control_Stream_LE+0xaa>
    10de:	85 30       	cpi	r24, 0x05	; 5
    10e0:	d9 f1       	breq	.+118    	; 0x1158 <Endpoint_Write_Control_Stream_LE+0xae>
    10e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10e6:	83 fd       	sbrc	r24, 3
    10e8:	39 c0       	rjmp	.+114    	; 0x115c <Endpoint_Write_Control_Stream_LE+0xb2>
    10ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10ee:	82 fd       	sbrc	r24, 2
    10f0:	2b c0       	rjmp	.+86     	; 0x1148 <Endpoint_Write_Control_Stream_LE+0x9e>
    10f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    10f6:	80 ff       	sbrs	r24, 0
    10f8:	eb cf       	rjmp	.-42     	; 0x10d0 <Endpoint_Write_Control_Stream_LE+0x26>
    10fa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	61 15       	cp	r22, r1
    1102:	71 05       	cpc	r23, r1
    1104:	51 f0       	breq	.+20     	; 0x111a <Endpoint_Write_Control_Stream_LE+0x70>
    1106:	88 30       	cpi	r24, 0x08	; 8
    1108:	91 05       	cpc	r25, r1
    110a:	38 f4       	brcc	.+14     	; 0x111a <Endpoint_Write_Control_Stream_LE+0x70>
    110c:	21 91       	ld	r18, Z+
    110e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    1112:	61 50       	subi	r22, 0x01	; 1
    1114:	71 09       	sbc	r23, r1
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	f3 cf       	rjmp	.-26     	; 0x1100 <Endpoint_Write_Control_Stream_LE+0x56>
    111a:	21 e0       	ldi	r18, 0x01	; 1
    111c:	08 97       	sbiw	r24, 0x08	; 8
    111e:	09 f0       	breq	.+2      	; 0x1122 <Endpoint_Write_Control_Stream_LE+0x78>
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1126:	8e 77       	andi	r24, 0x7E	; 126
    1128:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    112c:	d1 cf       	rjmp	.-94     	; 0x10d0 <Endpoint_Write_Control_Stream_LE+0x26>
    112e:	21 11       	cpse	r18, r1
    1130:	d2 cf       	rjmp	.-92     	; 0x10d6 <Endpoint_Write_Control_Stream_LE+0x2c>
    1132:	0a c0       	rjmp	.+20     	; 0x1148 <Endpoint_Write_Control_Stream_LE+0x9e>
    1134:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
    1138:	88 23       	and	r24, r24
    113a:	61 f0       	breq	.+24     	; 0x1154 <Endpoint_Write_Control_Stream_LE+0xaa>
    113c:	85 30       	cpi	r24, 0x05	; 5
    113e:	61 f0       	breq	.+24     	; 0x1158 <Endpoint_Write_Control_Stream_LE+0xae>
    1140:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1144:	83 fd       	sbrc	r24, 3
    1146:	0a c0       	rjmp	.+20     	; 0x115c <Endpoint_Write_Control_Stream_LE+0xb2>
    1148:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    114c:	82 ff       	sbrs	r24, 2
    114e:	f2 cf       	rjmp	.-28     	; 0x1134 <Endpoint_Write_Control_Stream_LE+0x8a>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	08 95       	ret
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	08 95       	ret
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	08 95       	ret

00001160 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1160:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <USB_ControlRequest+0x6>
    1164:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <USB_ControlRequest+0x7>
    1168:	26 17       	cp	r18, r22
    116a:	37 07       	cpc	r19, r23
    116c:	48 f0       	brcs	.+18     	; 0x1180 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    116e:	61 15       	cp	r22, r1
    1170:	71 05       	cpc	r23, r1
    1172:	39 f4       	brne	.+14     	; 0x1182 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1174:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1178:	2e 77       	andi	r18, 0x7E	; 126
    117a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <Endpoint_Write_Control_PStream_LE+0x22>
    1180:	b9 01       	movw	r22, r18
    1182:	fc 01       	movw	r30, r24
    1184:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1186:	61 15       	cp	r22, r1
    1188:	71 05       	cpc	r23, r1
    118a:	79 f1       	breq	.+94     	; 0x11ea <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    118c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <Endpoint_Write_Control_PStream_LE+0x36>
    1194:	3d c0       	rjmp	.+122    	; 0x1210 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	09 f4       	brne	.+2      	; 0x119c <Endpoint_Write_Control_PStream_LE+0x3c>
    119a:	3c c0       	rjmp	.+120    	; 0x1214 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    119c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    11a0:	83 fd       	sbrc	r24, 3
    11a2:	3a c0       	rjmp	.+116    	; 0x1218 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    11a8:	82 fd       	sbrc	r24, 2
    11aa:	2c c0       	rjmp	.+88     	; 0x1204 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
    11b0:	80 ff       	sbrs	r24, 0
    11b2:	e9 cf       	rjmp	.-46     	; 0x1186 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    11b4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    11b8:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    11ba:	61 15       	cp	r22, r1
    11bc:	71 05       	cpc	r23, r1
    11be:	59 f0       	breq	.+22     	; 0x11d6 <Endpoint_Write_Control_PStream_LE+0x76>
    11c0:	88 30       	cpi	r24, 0x08	; 8
    11c2:	91 05       	cpc	r25, r1
    11c4:	40 f4       	brcc	.+16     	; 0x11d6 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    11c6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11c8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    11cc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    11ce:	61 50       	subi	r22, 0x01	; 1
    11d0:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	f2 cf       	rjmp	.-28     	; 0x11ba <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	08 97       	sbiw	r24, 0x08	; 8
    11da:	09 f0       	breq	.+2      	; 0x11de <Endpoint_Write_Control_PStream_LE+0x7e>
    11dc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    11e2:	8e 77       	andi	r24, 0x7E	; 126
    11e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    11e8:	ce cf       	rjmp	.-100    	; 0x1186 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    11ea:	21 11       	cpse	r18, r1
    11ec:	cf cf       	rjmp	.-98     	; 0x118c <Endpoint_Write_Control_PStream_LE+0x2c>
    11ee:	0a c0       	rjmp	.+20     	; 0x1204 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11f0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11f4:	88 23       	and	r24, r24
    11f6:	61 f0       	breq	.+24     	; 0x1210 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11f8:	85 30       	cpi	r24, 0x05	; 5
    11fa:	61 f0       	breq	.+24     	; 0x1214 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1200:	83 fd       	sbrc	r24, 3
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1204:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1208:	82 ff       	sbrs	r24, 2
    120a:	f2 cf       	rjmp	.-28     	; 0x11f0 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1218:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    121a:	08 95       	ret

0000121c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    121c:	98 2f       	mov	r25, r24
    121e:	95 30       	cpi	r25, 0x05	; 5
    1220:	68 f5       	brcc	.+90     	; 0x127c <Endpoint_ConfigureEndpoint_Prv+0x60>
    1222:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    1226:	98 17       	cp	r25, r24
    1228:	39 f0       	breq	.+14     	; 0x1238 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    122a:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    122e:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1232:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    1236:	03 c0       	rjmp	.+6      	; 0x123e <Endpoint_ConfigureEndpoint_Prv+0x22>
    1238:	24 2f       	mov	r18, r20
    123a:	76 2f       	mov	r23, r22
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	21 fd       	sbrc	r18, 1
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1242:	9f 5f       	subi	r25, 0xFF	; 255
    1244:	ec cf       	rjmp	.-40     	; 0x121e <Endpoint_ConfigureEndpoint_Prv+0x2>
    1246:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    124a:	3e 7f       	andi	r19, 0xFE	; 254
    124c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1250:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1254:	3d 7f       	andi	r19, 0xFD	; 253
    1256:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    125a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    125e:	31 60       	ori	r19, 0x01	; 1
    1260:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1264:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1268:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    126c:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    1270:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1274:	27 fd       	sbrc	r18, 7
    1276:	e5 cf       	rjmp	.-54     	; 0x1242 <Endpoint_ConfigureEndpoint_Prv+0x26>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	08 95       	ret
    127c:	8f 70       	andi	r24, 0x0F	; 15
    127e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	08 95       	ret

00001286 <Endpoint_ConfigureEndpointTable>:
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	06 2f       	mov	r16, r22
    1290:	ec 01       	movw	r28, r24
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	10 17       	cp	r17, r16
    1296:	71 f1       	breq	.+92     	; 0x12f4 <Endpoint_ConfigureEndpointTable+0x6e>
    1298:	98 81       	ld	r25, Y
    129a:	91 11       	cpse	r25, r1
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <Endpoint_ConfigureEndpointTable+0x1e>
    129e:	1f 5f       	subi	r17, 0xFF	; 255
    12a0:	25 96       	adiw	r28, 0x05	; 5
    12a2:	f8 cf       	rjmp	.-16     	; 0x1294 <Endpoint_ConfigureEndpointTable+0xe>
    12a4:	2c 81       	ldd	r18, Y+4	; 0x04
    12a6:	a9 81       	ldd	r26, Y+1	; 0x01
    12a8:	ba 81       	ldd	r27, Y+2	; 0x02
    12aa:	6b 81       	ldd	r22, Y+3	; 0x03
    12ac:	89 2f       	mov	r24, r25
    12ae:	8f 70       	andi	r24, 0x0F	; 15
    12b0:	85 30       	cpi	r24, 0x05	; 5
    12b2:	10 f0       	brcs	.+4      	; 0x12b8 <Endpoint_ConfigureEndpointTable+0x32>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	1f c0       	rjmp	.+62     	; 0x12f6 <Endpoint_ConfigureEndpointTable+0x70>
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	10 f4       	brcc	.+4      	; 0x12c0 <Endpoint_ConfigureEndpointTable+0x3a>
    12bc:	42 e0       	ldi	r20, 0x02	; 2
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <Endpoint_ConfigureEndpointTable+0x3c>
    12c0:	46 e0       	ldi	r20, 0x06	; 6
    12c2:	e8 e0       	ldi	r30, 0x08	; 8
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	ea 17       	cp	r30, r26
    12ca:	fb 07       	cpc	r31, r27
    12cc:	20 f4       	brcc	.+8      	; 0x12d6 <Endpoint_ConfigureEndpointTable+0x50>
    12ce:	2f 5f       	subi	r18, 0xFF	; 255
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	f9 cf       	rjmp	.-14     	; 0x12c8 <Endpoint_ConfigureEndpointTable+0x42>
    12d6:	22 95       	swap	r18
    12d8:	20 7f       	andi	r18, 0xF0	; 240
    12da:	42 2b       	or	r20, r18
    12dc:	62 95       	swap	r22
    12de:	66 0f       	add	r22, r22
    12e0:	66 0f       	add	r22, r22
    12e2:	60 7c       	andi	r22, 0xC0	; 192
    12e4:	99 1f       	adc	r25, r25
    12e6:	99 27       	eor	r25, r25
    12e8:	99 1f       	adc	r25, r25
    12ea:	69 2b       	or	r22, r25
    12ec:	97 df       	rcall	.-210    	; 0x121c <Endpoint_ConfigureEndpoint_Prv>
    12ee:	81 11       	cpse	r24, r1
    12f0:	d6 cf       	rjmp	.-84     	; 0x129e <Endpoint_ConfigureEndpointTable+0x18>
    12f2:	e0 cf       	rjmp	.-64     	; 0x12b4 <Endpoint_ConfigureEndpointTable+0x2e>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1300:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>
    1304:	87 ff       	sbrs	r24, 7
    1306:	11 c0       	rjmp	.+34     	; 0x132a <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1308:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    130c:	82 fd       	sbrc	r24, 2
    130e:	05 c0       	rjmp	.+10     	; 0x131a <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1310:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
    1314:	81 11       	cpse	r24, r1
    1316:	f8 cf       	rjmp	.-16     	; 0x1308 <Endpoint_ClearStatusStage+0x8>
    1318:	11 c0       	rjmp	.+34     	; 0x133c <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    131a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    131e:	8b 77       	andi	r24, 0x7B	; 123
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1322:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
    1326:	88 23       	and	r24, r24
    1328:	49 f0       	breq	.+18     	; 0x133c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    132a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    132e:	80 ff       	sbrs	r24, 0
    1330:	f8 cf       	rjmp	.-16     	; 0x1322 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1332:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1336:	8e 77       	andi	r24, 0x7E	; 126
    1338:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    133c:	08 95       	ret

0000133e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    133e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    1342:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    1346:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1348:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    134c:	84 2f       	mov	r24, r20
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	40 ff       	sbrs	r20, 0
    1352:	23 c0       	rjmp	.+70     	; 0x139a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1354:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1358:	80 fd       	sbrc	r24, 0
    135a:	1d c0       	rjmp	.+58     	; 0x1396 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    135c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1360:	88 23       	and	r24, r24
    1362:	99 f0       	breq	.+38     	; 0x138a <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1364:	85 30       	cpi	r24, 0x05	; 5
    1366:	99 f0       	breq	.+38     	; 0x138e <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1368:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    136c:	85 fd       	sbrc	r24, 5
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <Endpoint_WaitUntilReady+0x54>
    1370:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    1374:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1378:	24 17       	cp	r18, r20
    137a:	35 07       	cpc	r19, r21
    137c:	29 f3       	breq	.-54     	; 0x1348 <Endpoint_WaitUntilReady+0xa>
    137e:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1380:	11 f0       	breq	.+4      	; 0x1386 <Endpoint_WaitUntilReady+0x48>
    1382:	9a 01       	movw	r18, r20
    1384:	e1 cf       	rjmp	.-62     	; 0x1348 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1386:	84 e0       	ldi	r24, 0x04	; 4
    1388:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    139a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    139e:	42 ff       	sbrs	r20, 2
    13a0:	dd cf       	rjmp	.-70     	; 0x135c <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    13a2:	08 95       	ret

000013a4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    13a4:	40 d0       	rcall	.+128    	; 0x1426 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    13a6:	42 d0       	rcall	.+132    	; 0x142c <USB_INT_ClearAllInterrupts>
    13a8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    13b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
    13b6:	80 68       	ori	r24, 0x80	; 128
    13b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    13bc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    13c0:	8f 7d       	andi	r24, 0xDF	; 223
    13c2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    13c6:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13c8:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13ca:	89 bd       	out	0x29, r24	; 41
    13cc:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    13ce:	00 fe       	sbrs	r0, 0
    13d0:	fd cf       	rjmp	.-6      	; 0x13cc <USB_ResetInterface+0x28>
    13d2:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    13d6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    13da:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    13de:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    13e2:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	19 df       	rcall	.-462    	; 0x121c <Endpoint_ConfigureEndpoint_Prv>
    13ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    13f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13f8:	81 60       	ori	r24, 0x01	; 1
    13fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    13fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1402:	88 60       	ori	r24, 0x08	; 8
    1404:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1408:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
    1412:	08 95       	ret

00001414 <USB_Init>:
    1414:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8e 7f       	andi	r24, 0xFE	; 254
    141c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <USB_IsInitialized>

	USB_ResetInterface();
    1424:	bf cf       	rjmp	.-130    	; 0x13a4 <USB_ResetInterface>

00001426 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1426:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    142a:	08 95       	ret

0000142c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    142c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1430:	08 95       	ret

00001432 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	2f 93       	push	r18
    143e:	3f 93       	push	r19
    1440:	4f 93       	push	r20
    1442:	5f 93       	push	r21
    1444:	6f 93       	push	r22
    1446:	7f 93       	push	r23
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	af 93       	push	r26
    144e:	bf 93       	push	r27
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1454:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1458:	82 ff       	sbrs	r24, 2
    145a:	0a c0       	rjmp	.+20     	; 0x1470 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    145c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1460:	82 ff       	sbrs	r24, 2
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1464:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1468:	8b 7f       	andi	r24, 0xFB	; 251
    146a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    146e:	32 d2       	rcall	.+1124   	; 0x18d4 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1470:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1474:	80 ff       	sbrs	r24, 0
    1476:	18 c0       	rjmp	.+48     	; 0x14a8 <__vector_11+0x76>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1478:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    147c:	80 ff       	sbrs	r24, 0
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <__vector_11+0x76>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1480:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1484:	8e 7f       	andi	r24, 0xFE	; 254
    1486:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    148a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    148e:	80 61       	ori	r24, 0x10	; 16
    1490:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1494:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    1498:	80 62       	ori	r24, 0x20	; 32
    149a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    149e:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    14a0:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
    14a4:	0e 94 34 01 	call	0x268	; 0x268 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    14a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    14ac:	84 ff       	sbrs	r24, 4
    14ae:	2f c0       	rjmp	.+94     	; 0x150e <__vector_11+0xdc>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    14b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    14b4:	84 ff       	sbrs	r24, 4
    14b6:	2b c0       	rjmp	.+86     	; 0x150e <__vector_11+0xdc>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    14b8:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    14be:	09 b4       	in	r0, 0x29	; 41
    14c0:	00 fe       	sbrs	r0, 0
    14c2:	fd cf       	rjmp	.-6      	; 0x14be <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14c4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    14c8:	8f 7d       	andi	r24, 0xDF	; 223
    14ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    14ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    14d2:	8f 7e       	andi	r24, 0xEF	; 239
    14d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    14d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    14dc:	8f 7e       	andi	r24, 0xEF	; 239
    14de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    14e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    14e6:	81 60       	ori	r24, 0x01	; 1
    14e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    14ec:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_Device_ConfigurationNumber>
    14f0:	88 23       	and	r24, r24
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14f8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    14fc:	87 fd       	sbrc	r24, 7
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <__vector_11+0xd2>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <__vector_11+0xd4>
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    150a:	0e 94 33 01 	call	0x266	; 0x266 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    150e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1512:	83 ff       	sbrs	r24, 3
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <__vector_11+0x132>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1516:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    151a:	83 ff       	sbrs	r24, 3
    151c:	23 c0       	rjmp	.+70     	; 0x1564 <__vector_11+0x132>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    151e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1522:	87 7f       	andi	r24, 0xF7	; 247
    1524:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    152e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1532:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    153c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    1540:	8e 7f       	andi	r24, 0xFE	; 254
    1542:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1546:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    154a:	80 61       	ori	r24, 0x10	; 16
    154c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1550:	42 e0       	ldi	r20, 0x02	; 2
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	62 de       	rcall	.-828    	; 0x121c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1558:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1562:	b8 d1       	rcall	.+880    	; 0x18d4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15ac:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    15b0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15b2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    15b6:	d8 2f       	mov	r29, r24
    15b8:	d1 70       	andi	r29, 0x01	; 1
    15ba:	80 fd       	sbrc	r24, 0
    15bc:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15be:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    15c2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    15c6:	87 7f       	andi	r24, 0xF7	; 247
    15c8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    15cc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    15ce:	1e d0       	rcall	.+60     	; 0x160c <USB_Device_ProcessControlRequest>
    15d0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    15d4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    15d8:	88 60       	ori	r24, 0x08	; 8
    15da:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    15de:	cd 2b       	or	r28, r29
    15e0:	cf 70       	andi	r28, 0x0F	; 15
    15e2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	aa 97       	sbiw	r28, 0x2a	; 42
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	ec e7       	ldi	r30, 0x7C	; 124
    1624:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1626:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    162a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	e4 38       	cpi	r30, 0x84	; 132
    1630:	f2 07       	cpc	r31, r18
    1632:	c9 f7       	brne	.-14     	; 0x1626 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1634:	0e 94 39 01 	call	0x272	; 0x272 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
    163c:	83 ff       	sbrs	r24, 3
    163e:	32 c1       	rjmp	.+612    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1640:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1644:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <USB_ControlRequest+0x1>
    1648:	95 30       	cpi	r25, 0x05	; 5
    164a:	09 f4       	brne	.+2      	; 0x164e <USB_Device_ProcessControlRequest+0x42>
    164c:	83 c0       	rjmp	.+262    	; 0x1754 <USB_Device_ProcessControlRequest+0x148>
    164e:	30 f4       	brcc	.+12     	; 0x165c <USB_Device_ProcessControlRequest+0x50>
    1650:	91 30       	cpi	r25, 0x01	; 1
    1652:	a9 f1       	breq	.+106    	; 0x16be <USB_Device_ProcessControlRequest+0xb2>
    1654:	68 f0       	brcs	.+26     	; 0x1670 <USB_Device_ProcessControlRequest+0x64>
    1656:	93 30       	cpi	r25, 0x03	; 3
    1658:	91 f1       	breq	.+100    	; 0x16be <USB_Device_ProcessControlRequest+0xb2>
    165a:	24 c1       	rjmp	.+584    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
    165c:	98 30       	cpi	r25, 0x08	; 8
    165e:	09 f4       	brne	.+2      	; 0x1662 <USB_Device_ProcessControlRequest+0x56>
    1660:	f0 c0       	rjmp	.+480    	; 0x1842 <USB_Device_ProcessControlRequest+0x236>
    1662:	99 30       	cpi	r25, 0x09	; 9
    1664:	09 f4       	brne	.+2      	; 0x1668 <USB_Device_ProcessControlRequest+0x5c>
    1666:	fc c0       	rjmp	.+504    	; 0x1860 <USB_Device_ProcessControlRequest+0x254>
    1668:	96 30       	cpi	r25, 0x06	; 6
    166a:	09 f0       	breq	.+2      	; 0x166e <USB_Device_ProcessControlRequest+0x62>
    166c:	1b c1       	rjmp	.+566    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
    166e:	94 c0       	rjmp	.+296    	; 0x1798 <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1670:	80 38       	cpi	r24, 0x80	; 128
    1672:	21 f0       	breq	.+8      	; 0x167c <USB_Device_ProcessControlRequest+0x70>
    1674:	82 38       	cpi	r24, 0x82	; 130
    1676:	09 f0       	breq	.+2      	; 0x167a <USB_Device_ProcessControlRequest+0x6e>
    1678:	15 c1       	rjmp	.+554    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
    167a:	08 c0       	rjmp	.+16     	; 0x168c <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    167c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1680:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <USB_Device_RemoteWakeupEnabled>
    1684:	99 23       	and	r25, r25
    1686:	89 f0       	breq	.+34     	; 0x16aa <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1688:	82 60       	ori	r24, 0x02	; 2
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <USB_Device_ProcessControlRequest+0x9e>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    168c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
    1690:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1692:	85 30       	cpi	r24, 0x05	; 5
    1694:	08 f0       	brcs	.+2      	; 0x1698 <USB_Device_ProcessControlRequest+0x8c>
    1696:	06 c1       	rjmp	.+524    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1698:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    169c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    16a0:	85 fb       	bst	r24, 5
    16a2:	88 27       	eor	r24, r24
    16a4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16a6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16aa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    16ae:	97 7f       	andi	r25, 0xF7	; 247
    16b0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    16b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
    16b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    16bc:	cd c0       	rjmp	.+410    	; 0x1858 <USB_Device_ProcessControlRequest+0x24c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16be:	28 2f       	mov	r18, r24
    16c0:	2d 7f       	andi	r18, 0xFD	; 253
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <USB_Device_ProcessControlRequest+0xba>
    16c4:	ef c0       	rjmp	.+478    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    16c6:	88 23       	and	r24, r24
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <USB_Device_ProcessControlRequest+0xc4>
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	61 f0       	breq	.+24     	; 0x16e6 <USB_Device_ProcessControlRequest+0xda>
    16ce:	ea c0       	rjmp	.+468    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    16d0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	09 f0       	breq	.+2      	; 0x16da <USB_Device_ProcessControlRequest+0xce>
    16d8:	e5 c0       	rjmp	.+458    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    16da:	93 30       	cpi	r25, 0x03	; 3
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <USB_Device_ProcessControlRequest+0xd4>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <USB_Device_RemoteWakeupEnabled>
    16e4:	2e c0       	rjmp	.+92     	; 0x1742 <USB_Device_ProcessControlRequest+0x136>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    16e6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
    16ea:	81 11       	cpse	r24, r1
    16ec:	2a c0       	rjmp	.+84     	; 0x1742 <USB_Device_ProcessControlRequest+0x136>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    16ee:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
    16f2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    16f4:	2f ef       	ldi	r18, 0xFF	; 255
    16f6:	28 0f       	add	r18, r24
    16f8:	24 30       	cpi	r18, 0x04	; 4
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <USB_Device_ProcessControlRequest+0xf2>
    16fc:	d3 c0       	rjmp	.+422    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1702:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1706:	20 ff       	sbrs	r18, 0
    1708:	1c c0       	rjmp	.+56     	; 0x1742 <USB_Device_ProcessControlRequest+0x136>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    170a:	93 30       	cpi	r25, 0x03	; 3
    170c:	21 f4       	brne	.+8      	; 0x1716 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    170e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	14 c0       	rjmp	.+40     	; 0x173e <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1716:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    171a:	90 61       	ori	r25, 0x10	; 16
    171c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1720:	21 e0       	ldi	r18, 0x01	; 1
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <USB_Device_ProcessControlRequest+0x120>
    1728:	44 0f       	add	r20, r20
    172a:	55 1f       	adc	r21, r21
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <USB_Device_ProcessControlRequest+0x11c>
    1730:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
    1734:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1738:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    173c:	88 60       	ori	r24, 0x08	; 8
    173e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1742:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1746:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    174a:	87 7f       	andi	r24, 0xF7	; 247
    174c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1750:	d7 dd       	rcall	.-1106   	; 0x1300 <Endpoint_ClearStatusStage>
    1752:	a8 c0       	rjmp	.+336    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1754:	81 11       	cpse	r24, r1
    1756:	a6 c0       	rjmp	.+332    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1758:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
    175c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    175e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
    1762:	80 78       	andi	r24, 0x80	; 128
    1764:	81 2b       	or	r24, r17
    1766:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
    176a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    176e:	87 7f       	andi	r24, 0xF7	; 247
    1770:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1774:	c5 dd       	rcall	.-1142   	; 0x1300 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1776:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
    177a:	80 ff       	sbrs	r24, 0
    177c:	fc cf       	rjmp	.-8      	; 0x1776 <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    177e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
    1782:	80 68       	ori	r24, 0x80	; 128
    1784:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1788:	11 11       	cpse	r17, r1
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <USB_Device_ProcessControlRequest+0x184>
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <USB_Device_ProcessControlRequest+0x186>
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>
    1796:	86 c0       	rjmp	.+268    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1798:	80 58       	subi	r24, 0x80	; 128
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <USB_Device_ProcessControlRequest+0x194>
    179e:	82 c0       	rjmp	.+260    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    17a0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
    17a4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <USB_ControlRequest+0x3>
    17a8:	8c 3d       	cpi	r24, 0xDC	; 220
    17aa:	53 e0       	ldi	r21, 0x03	; 3
    17ac:	95 07       	cpc	r25, r21
    17ae:	71 f5       	brne	.+92     	; 0x180c <USB_Device_ProcessControlRequest+0x200>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    17b4:	8a e2       	ldi	r24, 0x2A	; 42
    17b6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    17b8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    17ba:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    17bc:	de 01       	movw	r26, r28
    17be:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    17c0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    17c2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    17c4:	51 e2       	ldi	r21, 0x21	; 33
    17c6:	e3 2f       	mov	r30, r19
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    17ce:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    17d0:	20 ff       	sbrs	r18, 0
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <USB_Device_ProcessControlRequest+0x1ce>
					{
						SerialByte >>= 4;
    17d4:	e2 95       	swap	r30
    17d6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    17d8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    17da:	ef 70       	andi	r30, 0x0F	; 15
    17dc:	8e 2f       	mov	r24, r30
    17de:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    17e0:	ea 30       	cpi	r30, 0x0A	; 10
    17e2:	10 f0       	brcs	.+4      	; 0x17e8 <USB_Device_ProcessControlRequest+0x1dc>
    17e4:	c7 96       	adiw	r24, 0x37	; 55
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <USB_Device_ProcessControlRequest+0x1de>
    17e8:	c0 96       	adiw	r24, 0x30	; 48
    17ea:	8d 93       	st	X+, r24
    17ec:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	24 31       	cpi	r18, 0x14	; 20
    17f2:	49 f7       	brne	.-46     	; 0x17c6 <USB_Device_ProcessControlRequest+0x1ba>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    17f4:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1800:	6a e2       	ldi	r22, 0x2A	; 42
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	ce 01       	movw	r24, r28
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	50 dc       	rcall	.-1888   	; 0x10aa <Endpoint_Write_Control_Stream_LE>
    180a:	15 c0       	rjmp	.+42     	; 0x1836 <USB_Device_ProcessControlRequest+0x22a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    180c:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
    1810:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <USB_ControlRequest+0x5>
    1814:	ae 01       	movw	r20, r28
    1816:	4f 5f       	subi	r20, 0xFF	; 255
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	0e 94 3e 01 	call	0x27c	; 0x27c <CALLBACK_USB_GetDescriptor>
    181e:	bc 01       	movw	r22, r24
    1820:	89 2b       	or	r24, r25
    1822:	09 f4       	brne	.+2      	; 0x1826 <USB_Device_ProcessControlRequest+0x21a>
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
    1826:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    182a:	97 7f       	andi	r25, 0xF7	; 247
    182c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	95 dc       	rcall	.-1750   	; 0x1160 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1836:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    183a:	8b 77       	andi	r24, 0x7B	; 123
    183c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1840:	31 c0       	rjmp	.+98     	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1842:	80 38       	cpi	r24, 0x80	; 128
    1844:	79 f5       	brne	.+94     	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1846:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    184a:	87 7f       	andi	r24, 0xF7	; 247
    184c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1850:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1854:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1858:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    185c:	8e 77       	andi	r24, 0x7E	; 126
    185e:	76 cf       	rjmp	.-276    	; 0x174c <USB_Device_ProcessControlRequest+0x140>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1860:	81 11       	cpse	r24, r1
    1862:	20 c0       	rjmp	.+64     	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1864:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
    1868:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <USB_ControlRequest+0x3>
    186c:	99 27       	eor	r25, r25
    186e:	02 97       	sbiw	r24, 0x02	; 2
    1870:	cc f4       	brge	.+50     	; 0x18a4 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1872:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1876:	87 7f       	andi	r24, 0xF7	; 247
    1878:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    187c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
    1880:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1884:	3d dd       	rcall	.-1414   	; 0x1300 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1886:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_Device_ConfigurationNumber>
    188a:	81 11       	cpse	r24, r1
    188c:	06 c0       	rjmp	.+12     	; 0x189a <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    188e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1892:	87 fd       	sbrc	r24, 7
    1894:	02 c0       	rjmp	.+4      	; 0x189a <USB_Device_ProcessControlRequest+0x28e>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <USB_Device_ProcessControlRequest+0x290>
    189a:	84 e0       	ldi	r24, 0x04	; 4
    189c:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    18a0:	0e 94 35 01 	call	0x26a	; 0x26a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    18a8:	83 ff       	sbrs	r24, 3
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <USB_Device_ProcessControlRequest+0x2b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    18b0:	87 7f       	andi	r24, 0xF7	; 247
    18b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    18b6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    18ba:	80 62       	ori	r24, 0x20	; 32
    18bc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    18c0:	aa 96       	adiw	r28, 0x2a	; 42
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	08 95       	ret

000018d4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    18d4:	08 95       	ret

000018d6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    18d6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    18d8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
    18dc:	88 23       	and	r24, r24
    18de:	99 f0       	breq	.+38     	; 0x1906 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18e0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
    18e4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    18e6:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    18ea:	89 2f       	mov	r24, r25
    18ec:	81 70       	andi	r24, 0x01	; 1
    18ee:	90 fd       	sbrc	r25, 0
    18f0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18f2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18f4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    18fc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    18fe:	86 de       	rcall	.-756    	; 0x160c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1900:	cf 70       	andi	r28, 0x0F	; 15
    1902:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    190e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	if (!(Endpoint_IsSETUPReceived()))
    1912:	23 ff       	sbrs	r18, 3
    1914:	38 c0       	rjmp	.+112    	; 0x1986 <MS_Device_ProcessControlRequest+0x7c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1916:	fc 01       	movw	r30, r24
    1918:	20 81       	ld	r18, Z
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
    1920:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <USB_ControlRequest+0x5>
    1924:	42 17       	cp	r20, r18
    1926:	53 07       	cpc	r21, r19
    1928:	71 f5       	brne	.+92     	; 0x1986 <MS_Device_ProcessControlRequest+0x7c>
	  return;

	switch (USB_ControlRequest.bRequest)
    192a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <USB_ControlRequest+0x1>
    192e:	2e 3f       	cpi	r18, 0xFE	; 254
    1930:	81 f0       	breq	.+32     	; 0x1952 <MS_Device_ProcessControlRequest+0x48>
    1932:	2f 3f       	cpi	r18, 0xFF	; 255
    1934:	41 f5       	brne	.+80     	; 0x1986 <MS_Device_ProcessControlRequest+0x7c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1936:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <USB_ControlRequest>
    193a:	21 32       	cpi	r18, 0x21	; 33
    193c:	21 f5       	brne	.+72     	; 0x1986 <MS_Device_ProcessControlRequest+0x7c>
    193e:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1940:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1944:	87 7f       	andi	r24, 0xF7	; 247
    1946:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    194a:	da dc       	rcall	.-1612   	; 0x1300 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	88 af       	std	Y+56, r24	; 0x38
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <MS_Device_ProcessControlRequest+0x7c>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1952:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <USB_ControlRequest>
    1956:	21 3a       	cpi	r18, 0xA1	; 161
    1958:	b1 f4       	brne	.+44     	; 0x1986 <MS_Device_ProcessControlRequest+0x7c>
    195a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    195e:	27 7f       	andi	r18, 0xF7	; 247
    1960:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1964:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1968:	20 ff       	sbrs	r18, 0
    196a:	fc cf       	rjmp	.-8      	; 0x1964 <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    196c:	fc 01       	movw	r30, r24
    196e:	83 85       	ldd	r24, Z+11	; 0x0b
    1970:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1972:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1976:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    197a:	8e 77       	andi	r24, 0x7E	; 126
    197c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1980:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1982:	cf 91       	pop	r28
    1984:	bd cc       	rjmp	.-1670   	; 0x1300 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1992:	fc 01       	movw	r30, r24
    1994:	3c 96       	adiw	r30, 0x0c	; 12
    1996:	8d e2       	ldi	r24, 0x2D	; 45
    1998:	df 01       	movw	r26, r30
    199a:	1d 92       	st	X+, r1
    199c:	8a 95       	dec	r24
    199e:	e9 f7       	brne	.-6      	; 0x199a <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    19a4:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	6c dc       	rcall	.-1832   	; 0x1286 <Endpoint_ConfigureEndpointTable>
    19ae:	88 23       	and	r24, r24
    19b0:	31 f0       	breq	.+12     	; 0x19be <MS_Device_ConfigureEndpoints+0x32>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	ce 01       	movw	r24, r28
    19b6:	06 96       	adiw	r24, 0x06	; 6
	  return false;

	return true;
}
    19b8:	df 91       	pop	r29
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    19ba:	cf 91       	pop	r28
    19bc:	64 cc       	rjmp	.-1848   	; 0x1286 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <MS_Device_USBTask+0xe>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    19d8:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_DeviceState>
    19dc:	24 30       	cpi	r18, 0x04	; 4
    19de:	09 f0       	breq	.+2      	; 0x19e2 <MS_Device_USBTask+0x1c>
    19e0:	00 c1       	rjmp	.+512    	; 0x1be2 <MS_Device_USBTask+0x21c>
    19e2:	8c 01       	movw	r16, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19e4:	fc 01       	movw	r30, r24
    19e6:	86 81       	ldd	r24, Z+6	; 0x06
    19e8:	8f 70       	andi	r24, 0x0F	; 15
    19ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	bd c0       	rjmp	.+378    	; 0x1b70 <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19f6:	86 81       	ldd	r24, Z+6	; 0x06
    19f8:	8f 70       	andi	r24, 0x0F	; 15
    19fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    19fe:	1a 82       	std	Y+2, r1	; 0x02
    1a00:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1a02:	78 01       	movw	r14, r16
    1a04:	fc e0       	ldi	r31, 0x0C	; 12
    1a06:	ef 0e       	add	r14, r31
    1a08:	f1 1c       	adc	r15, r1
    1a0a:	ae 01       	movw	r20, r28
    1a0c:	4f 5f       	subi	r20, 0xFF	; 255
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	6f e0       	ldi	r22, 0x0F	; 15
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	c7 01       	movw	r24, r14
    1a16:	00 db       	rcall	.-2560   	; 0x1018 <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1a18:	f8 01       	movw	r30, r16
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1a1a:	85 30       	cpi	r24, 0x05	; 5
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <MS_Device_USBTask+0x60>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1a1e:	80 ad       	ldd	r24, Z+56	; 0x38
    1a20:	88 23       	and	r24, r24
    1a22:	99 f3       	breq	.-26     	; 0x1a0a <MS_Device_USBTask+0x44>
    1a24:	a5 c0       	rjmp	.+330    	; 0x1b70 <MS_Device_USBTask+0x1aa>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1a26:	84 85       	ldd	r24, Z+12	; 0x0c
    1a28:	95 85       	ldd	r25, Z+13	; 0x0d
    1a2a:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a2c:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a2e:	85 35       	cpi	r24, 0x55	; 85
    1a30:	93 45       	sbci	r25, 0x53	; 83
    1a32:	a2 44       	sbci	r26, 0x42	; 66
    1a34:	b3 44       	sbci	r27, 0x43	; 67
    1a36:	61 f4       	brne	.+24     	; 0x1a50 <MS_Device_USBTask+0x8a>
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 8d       	ldd	r25, Z+25	; 0x19
    1a3c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a3e:	98 17       	cp	r25, r24
    1a40:	38 f4       	brcc	.+14     	; 0x1a50 <MS_Device_USBTask+0x8a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1a42:	80 8d       	ldd	r24, Z+24	; 0x18
    1a44:	8f 71       	andi	r24, 0x1F	; 31
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <MS_Device_USBTask+0x8a>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1a48:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a4a:	81 50       	subi	r24, 0x01	; 1
    1a4c:	80 31       	cpi	r24, 0x10	; 16
    1a4e:	80 f0       	brcs	.+32     	; 0x1a70 <MS_Device_USBTask+0xaa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a50:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1a54:	80 62       	ori	r24, 0x20	; 32
    1a56:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	81 81       	ldd	r24, Z+1	; 0x01
    1a5e:	8f 70       	andi	r24, 0x0F	; 15
    1a60:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a64:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1a68:	80 62       	ori	r24, 0x20	; 32
    1a6a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1a6e:	80 c0       	rjmp	.+256    	; 0x1b70 <MS_Device_USBTask+0x1aa>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1a70:	1a 82       	std	Y+2, r1	; 0x02
    1a72:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1a74:	78 01       	movw	r14, r16
    1a76:	fb e1       	ldi	r31, 0x1B	; 27
    1a78:	ef 0e       	add	r14, r31
    1a7a:	f1 1c       	adc	r15, r1
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	62 8d       	ldd	r22, Z+26	; 0x1a
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	ae 01       	movw	r20, r28
    1a84:	4f 5f       	subi	r20, 0xFF	; 255
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	c7 01       	movw	r24, r14
    1a8a:	c6 da       	rcall	.-2676   	; 0x1018 <Endpoint_Read_Stream_LE>
    1a8c:	85 30       	cpi	r24, 0x05	; 5
    1a8e:	29 f4       	brne	.+10     	; 0x1a9a <MS_Device_USBTask+0xd4>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 ad       	ldd	r24, Z+56	; 0x38
    1a94:	88 23       	and	r24, r24
    1a96:	91 f3       	breq	.-28     	; 0x1a7c <MS_Device_USBTask+0xb6>
    1a98:	6b c0       	rjmp	.+214    	; 0x1b70 <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1a9e:	8b 77       	andi	r24, 0x7B	; 123
    1aa0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	80 8d       	ldd	r24, Z+24	; 0x18
    1aa8:	87 ff       	sbrs	r24, 7
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <MS_Device_USBTask+0xee>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aac:	81 81       	ldd	r24, Z+1	; 0x01
    1aae:	8f 70       	andi	r24, 0x0F	; 15
    1ab0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	0e 94 3d 01 	call	0x27a	; 0x27a <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	98 27       	eor	r25, r24
    1abe:	f8 01       	movw	r30, r16
    1ac0:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1ac2:	45 e5       	ldi	r20, 0x55	; 85
    1ac4:	53 e5       	ldi	r21, 0x53	; 83
    1ac6:	62 e4       	ldi	r22, 0x42	; 66
    1ac8:	73 e5       	ldi	r23, 0x53	; 83
    1aca:	43 a7       	std	Z+43, r20	; 0x2b
    1acc:	54 a7       	std	Z+44, r21	; 0x2c
    1ace:	65 a7       	std	Z+45, r22	; 0x2d
    1ad0:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1ad2:	40 89       	ldd	r20, Z+16	; 0x10
    1ad4:	51 89       	ldd	r21, Z+17	; 0x11
    1ad6:	62 89       	ldd	r22, Z+18	; 0x12
    1ad8:	73 89       	ldd	r23, Z+19	; 0x13
    1ada:	47 a7       	std	Z+47, r20	; 0x2f
    1adc:	50 ab       	std	Z+48, r21	; 0x30
    1ade:	61 ab       	std	Z+49, r22	; 0x31
    1ae0:	72 ab       	std	Z+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1ae2:	44 89       	ldd	r20, Z+20	; 0x14
    1ae4:	55 89       	ldd	r21, Z+21	; 0x15
    1ae6:	66 89       	ldd	r22, Z+22	; 0x16
    1ae8:	77 89       	ldd	r23, Z+23	; 0x17
    1aea:	43 ab       	std	Z+51, r20	; 0x33
    1aec:	54 ab       	std	Z+52, r21	; 0x34
    1aee:	65 ab       	std	Z+53, r22	; 0x35
    1af0:	76 ab       	std	Z+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1af2:	81 11       	cpse	r24, r1
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <MS_Device_USBTask+0x142>
    1af6:	45 2b       	or	r20, r21
    1af8:	46 2b       	or	r20, r22
    1afa:	47 2b       	or	r20, r23
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <MS_Device_USBTask+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1afe:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1b02:	80 62       	ori	r24, 0x20	; 32
    1b04:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b08:	f8 01       	movw	r30, r16
    1b0a:	86 81       	ldd	r24, Z+6	; 0x06
    1b0c:	8f 70       	andi	r24, 0x0F	; 15
    1b0e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b12:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b16:	f8 01       	movw	r30, r16

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1b18:	85 ff       	sbrs	r24, 5
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <MS_Device_USBTask+0x15e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b1c:	80 ad       	ldd	r24, Z+56	; 0x38
    1b1e:	88 23       	and	r24, r24
    1b20:	c1 f3       	breq	.-16     	; 0x1b12 <MS_Device_USBTask+0x14c>
    1b22:	26 c0       	rjmp	.+76     	; 0x1b70 <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b24:	81 81       	ldd	r24, Z+1	; 0x01
    1b26:	8f 70       	andi	r24, 0x0F	; 15
    1b28:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b2c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1b30:	85 ff       	sbrs	r24, 5
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <MS_Device_USBTask+0x178>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 ad       	ldd	r24, Z+56	; 0x38
    1b38:	88 23       	and	r24, r24
    1b3a:	c1 f3       	breq	.-16     	; 0x1b2c <MS_Device_USBTask+0x166>
    1b3c:	19 c0       	rjmp	.+50     	; 0x1b70 <MS_Device_USBTask+0x1aa>
		  return;
	}

	uint16_t BytesProcessed = 0;
    1b3e:	1a 82       	std	Y+2, r1	; 0x02
    1b40:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1b42:	78 01       	movw	r14, r16
    1b44:	fb e2       	ldi	r31, 0x2B	; 43
    1b46:	ef 0e       	add	r14, r31
    1b48:	f1 1c       	adc	r15, r1
    1b4a:	ae 01       	movw	r20, r28
    1b4c:	4f 5f       	subi	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	6d e0       	ldi	r22, 0x0D	; 13
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	c7 01       	movw	r24, r14
    1b56:	c9 d9       	rcall	.-3182   	; 0xeea <Endpoint_Write_Stream_LE>
    1b58:	85 30       	cpi	r24, 0x05	; 5
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <MS_Device_USBTask+0x1a0>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	80 ad       	ldd	r24, Z+56	; 0x38
    1b60:	88 23       	and	r24, r24
    1b62:	99 f3       	breq	.-26     	; 0x1b4a <MS_Device_USBTask+0x184>
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
    1b6a:	8e 77       	andi	r24, 0x7E	; 126
    1b6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1b70:	f8 01       	movw	r30, r16
    1b72:	80 ad       	ldd	r24, Z+56	; 0x38
    1b74:	88 23       	and	r24, r24
    1b76:	a9 f1       	breq	.+106    	; 0x1be2 <MS_Device_USBTask+0x21c>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b78:	26 81       	ldd	r18, Z+6	; 0x06
    1b7a:	2f 70       	andi	r18, 0x0F	; 15
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	ac 01       	movw	r20, r24
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <MS_Device_USBTask+0x1c2>
    1b84:	44 0f       	add	r20, r20
    1b86:	55 1f       	adc	r21, r21
    1b88:	2a 95       	dec	r18
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <MS_Device_USBTask+0x1be>
    1b8c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
    1b90:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b94:	21 81       	ldd	r18, Z+1	; 0x01
    1b96:	2f 70       	andi	r18, 0x0F	; 15
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <MS_Device_USBTask+0x1d6>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	2a 95       	dec	r18
    1b9e:	ea f7       	brpl	.-6      	; 0x1b9a <MS_Device_USBTask+0x1d4>
    1ba0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
    1ba4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ba8:	86 81       	ldd	r24, Z+6	; 0x06
    1baa:	8f 70       	andi	r24, 0x0F	; 15
    1bac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1bb0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1bb4:	80 61       	ori	r24, 0x10	; 16
    1bb6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1bba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1bbe:	88 60       	ori	r24, 0x08	; 8
    1bc0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
    1bc6:	8f 70       	andi	r24, 0x0F	; 15
    1bc8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1bcc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1bd0:	80 61       	ori	r24, 0x10	; 16
    1bd2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1bd6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
    1bda:	88 60       	ori	r24, 0x08	; 8
    1bdc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1be0:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	08 95       	ret

00001bf4 <_exit>:
    1bf4:	f8 94       	cli

00001bf6 <__stop_program>:
    1bf6:	ff cf       	rjmp	.-2      	; 0x1bf6 <__stop_program>
